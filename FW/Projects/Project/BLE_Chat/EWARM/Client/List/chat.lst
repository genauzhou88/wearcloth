###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      31/Oct/2014  16:42:22 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\src\chat.c                                          #
#    Command line =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\src\chat.c -D USE_STDPERIPH_DRIVER -D STM32L1XX_MD  #
#                    -D SYSCLK_FREQ_HSI_32MHz -D ENABLE_USB -D                #
#                    ENABLE_USB_PRINTF -D CLIENT=1 -D DEBUG -D                #
#                    BLUENRG_CONFIG=BLUENRG_16_MHZ -lcN                       #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Client\List\ --diag_suppress Pa050 -o         #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Client\Obj\ --debug --endian=little           #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\inc\ -I "C:\Users\FredZhou\Documents\Origi #
#                    n\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth     #
#                    LE\SimpleBlueNRG_HCI\" -I "C:\Users\FredZhou\Documents\O #
#                    rigin\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth #
#                     LE\SimpleBlueNRG_HCI\includes\" -I                      #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\ -I               #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\ -I     #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\CMSIS\C #
#                    M3\DeviceSupport\ST\STM32L1xx\ -I                        #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32_U #
#                    SB-FS-Device_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32L1 #
#                    xx_StdPeriph_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\I2C\inc #
#                    \ -I C:\Users\FredZhou\Documents\Origin\Projects\Project #
#                    \BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LI #
#                    S3DH\inc\ -I C:\Users\FredZhou\Documents\Origin\Projects #
#                    \Project\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libr #
#                    aries\STLM75\inc\ -I C:\Users\FredZhou\Documents\Origin\ #
#                    Projects\Project\BLE_Chat\EWARM\..\..\..\platform\STM32L #
#                    1XX\Libraries\HTS221\inc\ -I                             #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LPS25H\ #
#                    inc\ -I C:\Users\FredZhou\Documents\Origin\Projects\Proj #
#                    ect\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries #
#                    \SDK_Eval_STM32L\inc\ -Ohs --use_c++_inline -I           #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Client\List\chat.lst                          #
#    Object file  =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Client\Obj\chat.o                             #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_Chat\src\chat.c
      1          #include <stdio.h>
      2          #include <string.h>
      3          
      4          #include "stm32l1xx.h"
      5          #include "hal_types.h"
      6          #include "gap.h"
      7          #include "gatt_server.h"
      8          #include "hci.h"
      9          #include "osal.h"
     10          #include "clock.h"
     11          #include "gp_timer.h"
     12          #include "bluenrg_hci.h"
     13          
     14          #include "rtctime.h"
     15          /* Private macros ------------------------------------------------------------*/
     16          #if DEBUG
     17          #include <stdio.h>
     18          #define PRINTF(...) printf(__VA_ARGS__)
     19          #else
     20          #define PRINTF(...)
     21          #endif
     22          
     23          #define MIN(a,b)            ((a) < (b) )? (a) : (b) 
     24          
     25          #define CMD_BUFF_SIZE 512
     26          
     27          static char cmd[CMD_BUFF_SIZE];
     28          
     29          extern tHalUint16 chatServHandle, TXCharHandle, RXCharHandle;
     30          extern tHalUint16 chatServHandle2, TXCharHandle2, RXCharHandle2;
     31          extern volatile uint16_t connection_handle;
     32          extern volatile uint16_t connection2_handle;
     33          
     34          
     35          #ifdef CLIENT
     36          extern uint16_t rx_handle;
     37          extern uint16_t rx_handle2;
     38          #endif 
     39          
     40          void mysetsettime(char *s1,uint8_t type)
     41          {
     42              char seps[] = " ";
     43              char *token = NULL;
     44              char *next_token = NULL;
     45              
     46              token = strtok_r(s1, seps, &next_token);
     47              int i = 0;
     48              int hr, min, sec;  
     49              while (token != NULL)
     50              {
     51                
     52                if (i == 1)
     53                  {
     54                    hr = atoi(token);
     55                    //printf("hour/year is %d\n", hr);
     56                  }
     57                  if (i == 2)
     58                  {
     59                    min = atoi(token);
     60                    //printf("min is %s\n", min);
     61                  }
     62                  if (i == 3 )
     63                  {
     64                    sec = atoi(token);
     65                    //printf ("sec/date is %s\n", sec);
     66                    //ToDO: Need data check here;
     67                    if (type == 1) //set time
     68                      RTC_SetMyTime(hr,min,sec);
     69                    if (type == 2) //set date
     70                      RTC_SetMyDate(hr,min,sec);
     71                  }
     72                  token = strtok_r(NULL,seps,&next_token);
     73                  i++;
     74              }
     75          }
     76          
     77          int mystrcmp(const char *s1, const char *s2, uint8_t length)
     78          {       /* compare unsigned char s1[], s2[] */
     79              int i;
     80              for (i=0; *s1 == *s2; ++s1, ++s2,i++)
     81              {
     82                //printf("s1 is %02X, s2 is %02X\n",*s1,*s2);
     83                
     84              }
     85            //printf("after compare, i is %d, lens of s2 is %d, s1 is %02X\n",i,length,*s1);
     86                if (i == length)
     87                  return (0);
     88                  
     89                if (*s1 < 32 || *s2 > 126)
     90                  return (0);
     91              return (*(unsigned char *)s1 < *(unsigned char *)s2
     92                          ? -1 : +1);
     93          }
     94          /*******************************************************************************
     95          * Function Name  : processInputData.
     96          * Description    : Process a command. It should be called when data are received.
     97          * Input          : data_buffer: data address.
     98          *	           Nb_bytes: number of received bytes.
     99          * Return         : none.
    100          *******************************************************************************/
    101          
    102          void processInputData(uint8_t* data_buffer, uint16_t Nb_bytes)
    103          {
    104              static uint16_t end = 0;
    105              uint8_t i;
    106              //PRINTF("DATA is received in processInputData!!\n");
    107              //PRINTF("DATA is %s", data_buffer);
    108              char cmd_gettime[] = "showtime";
    109              char cmd_settime[] = "settime";
    110              char cmd_setdate[] = "setdate";
    111              //Process command from user
    112              if (mystrcmp(data_buffer, cmd_gettime,strlen(cmd_gettime)) == 0)
    113              {
    114                printf("let's show time!!\n");
    115                RTC_TimeShow();
    116              }
    117              
    118              if (mystrcmp(data_buffer,cmd_settime,strlen(cmd_settime)) == 0)
    119              {
    120                printf("let's set time!!\n");
    121                mysetsettime(data_buffer,1);
    122              }
    123              
    124              if (mystrcmp(data_buffer,cmd_setdate,strlen(cmd_setdate)) == 0)
    125              {
    126                printf("let's set date!!\n");
    127                mysetsettime(data_buffer,2);
    128              }
    129              for (i = 0; i < Nb_bytes; i++)
    130              {
    131                  if(end >= CMD_BUFF_SIZE-1){
    132                      end = 0;
    133                  }
    134                  
    135                  cmd[end] = data_buffer[i];
    136                  end++;
    137                  
    138                  if(cmd[end-1] == '\n'){
    139                      if(end != 1){
    140                          int j = 0;
    141                          cmd[end] = '\0';
    142                              
    143                          while(j < end){
    144                              uint32_t len = MIN(20, end - j);
    145                              struct timer t;
    146                              Timer_Set(&t, CLOCK_SECOND*10);
    147                              
    148          #if SERVER                      
    149                              //PRINTF("running on SERVER \n");
    150                              while(aci_gatt_update_char_value(chatServHandle,TXCharHandle,0,len,(tHalUint8 *)cmd+j)==BLE_STATUS_INSUFFICIENT_RESOURCES){
    151          #elif SERVER_2                      
    152                              
    153                              //PRINTF("running on SERVER_2! \n");
    154                              while(aci_gatt_update_char_value(chatServHandle2,TXCharHandle2,0,len,(tHalUint8 *)cmd+j)==BLE_STATUS_INSUFFICIENT_RESOURCES){
    155          #elif CLIENT
    156                              //PRINTF("running on CLENT, waiting for SERVER!\n");
    157                              while(aci_gatt_write_without_response(connection_handle, rx_handle+1, len, (tHalUint8 *)cmd+j)==BLE_STATUS_NOT_ALLOWED){
    158          #else
    159          #error "Define SERVER or CLIENT"
    160          #endif
    161                                  // Radio is busy (buffer full).
    162                                  if(Timer_Expired(&t))
    163                                  {
    164                                      PRINTF("time out for waititng from client for server 1 \n");
    165                                      break;
    166                                  }
    167                              }
    168          #if CLIENT
    169                              //handle another connection
    170                              PRINTF("running on CLENT, waiting for SERVER_2!\n");
    171                              while(aci_gatt_write_without_response(connection2_handle, rx_handle2+1, len, (tHalUint8 *)cmd+j)==BLE_STATUS_NOT_ALLOWED){
    172                                  // Radio is busy (buffer full).
    173                                  if(Timer_Expired(&t))
    174                                  {
    175                                      PRINTF("time out for waititng from client for server 2 \n");
    176                                      break;
    177                                  }
    178                              }
    179          #endif
    180                              j += len;            
    181                          }
    182                      }
    183                      end = 0;
    184                  }
    185              }
    186          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   mysetsettime
        32   -> RTC_SetMyDate
        32   -> RTC_SetMyTime
        32   -> atoi
        32   -> strtok_r
       8   mystrcmp
      88   processInputData
        88   -> RTC_SetMyDate
        88   -> RTC_SetMyTime
        88   -> RTC_TimeShow
        88   -> Timer_Expired
        88   -> Timer_Set
        88   -> aci_gatt_write_without_response
        88   -> atoi
        88   -> mystrcmp
        88   -> printf
        88   -> strlen
        88   -> strtok_r


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant " ">
      20  ?<Constant "let\'s set date!!\n">
      20  ?<Constant "let\'s set time!!\n">
      20  ?<Constant "let\'s show time!!\n">
      44  ?<Constant "running on CLENT, wai...">
       8  ?<Constant "setdate">
       8  ?<Constant "settime">
      12  ?<Constant "showtime">
      52  ?<Constant "time out for waititng...">
      52  ?<Constant "time out for waititng...">_1
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
     516  end
          cmd
     114  mysetsettime
     104  mystrcmp
     558  processInputData

 
   516 bytes in section .bss
 1 038 bytes in section .text
 
 1 038 bytes of CODE memory
   516 bytes of DATA memory

Errors: none
Warnings: 8
