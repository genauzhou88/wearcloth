###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      09/Oct/2014  10:33:32 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\FredZhou\Documents\Origin\Projects\platform\STM #
#                    32L1XX\Libraries\SDK_Eval_STM32L\src\SDK_EVAL_Spi_Driver #
#                    .c                                                       #
#    Command line =  C:\Users\FredZhou\Documents\Origin\Projects\platform\STM #
#                    32L1XX\Libraries\SDK_Eval_STM32L\src\SDK_EVAL_Spi_Driver #
#                    .c -D USE_STDPERIPH_DRIVER -D STM32L1XX_MD -D            #
#                    SYSCLK_FREQ_HSI_32MHz -D ENABLE_USB -D                   #
#                    ENABLE_USB_PRINTF -D CLIENT=1 -D DEBUG -D                #
#                    BLUENRG_CONFIG=BLUENRG_16_MHZ -lcN                       #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Client\List\ --diag_suppress Pa050 -o         #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Client\Obj\ --debug --endian=little           #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\inc\ -I "C:\Users\FredZhou\Documents\Origi #
#                    n\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth     #
#                    LE\SimpleBlueNRG_HCI\" -I "C:\Users\FredZhou\Documents\O #
#                    rigin\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth #
#                     LE\SimpleBlueNRG_HCI\includes\" -I                      #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\ -I               #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\ -I     #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\CMSIS\C #
#                    M3\DeviceSupport\ST\STM32L1xx\ -I                        #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32_U #
#                    SB-FS-Device_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32L1 #
#                    xx_StdPeriph_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\I2C\inc #
#                    \ -I C:\Users\FredZhou\Documents\Origin\Projects\Project #
#                    \BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LI #
#                    S3DH\inc\ -I C:\Users\FredZhou\Documents\Origin\Projects #
#                    \Project\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libr #
#                    aries\STLM75\inc\ -I C:\Users\FredZhou\Documents\Origin\ #
#                    Projects\Project\BLE_Chat\EWARM\..\..\..\platform\STM32L #
#                    1XX\Libraries\HTS221\inc\ -I                             #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LPS25H\ #
#                    inc\ -I C:\Users\FredZhou\Documents\Origin\Projects\Proj #
#                    ect\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries #
#                    \SDK_Eval_STM32L\inc\ -Ohs --use_c++_inline -I           #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Client\List\SDK_EVAL_Spi_Driver.lst           #
#    Object file  =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Client\Obj\SDK_EVAL_Spi_Driver.o              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\FredZhou\Documents\Origin\Projects\platform\STM32L1XX\Libraries\SDK_Eval_STM32L\src\SDK_EVAL_Spi_Driver.c
      1          /**
      2          * @file    SDK_EVAL_SPI_Driver.c
      3          * @author  AAS,AMS
      4          * @version V1.0.1
      5          * @date    March 10, 2014
      6          * @brief   This file provides all the low level SPI API to access to BlueNRG module
      7          * @details
      8          *
      9          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     11          * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     12          * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     13          * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     14          * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15          *
     16          * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     17          * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     18          * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     19          *
     20          * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     21          *
     22          */
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "SDK_EVAL_Config.h"
     26          #include "clock.h" 
     27          
     28          /** @addtogroup SDK_EVAL_STM32L
     29          * @{
     30          */
     31          
     32          /** @addtogroup SDK_EVAL_Spi                    SDK EVAL Spi
     33          * @brief SPI functions implementation.
     34          * @details This file implements the BlueNRG Library SPI interface functions. 
     35          * @{
     36          */
     37          
     38          
     39          /** @defgroup SPI_Private_TypesDefinitions
     40          * @{
     41          */
     42          /* Added define for enabling BlueNRG SPI fix */
     43          #ifndef ENABLE_SPI_FIX
     44          #define ENABLE_SPI_FIX 1
     45          #endif 
     46          
     47          /**
     48          * @}
     49          */
     50          
     51          /** @defgroup SPI_Private_Variables
     52          * @{
     53          */
     54          
     55          #ifndef USER_DEFINED_PLATFORM
     56          
     57          /* SPIs list */
     58          static SPI_TypeDef* s_SpiPortVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_SPI_PERIPH_NB, SDK_EVAL_V3_SPI_PERIPH_NB};
     59          
     60          /* SPI CS Ports list*/
     61          GPIO_TypeDef* s_SpiCsPortVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_SPI_PERIPH_CS_PORT, SDK_EVAL_V3_SPI_PERIPH_CS_PORT};
     62          /* SPI CS Pins list */
     63          static const uint32_t s_SpiCsPinVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_SPI_PERIPH_CS_PIN, SDK_EVAL_V3_SPI_PERIPH_CS_PIN};
     64          
     65          /* SPI Reset Ports list*/
     66          GPIO_TypeDef* s_SpiRstPortVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_SW_RST_GPIO_PORT, SDK_EVAL_V3_SW_RST_GPIO_PORT};
     67          /* SPI Reset Pins list */
     68          static const uint32_t s_SpiRstPinVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_SW_RST_PIN, SDK_EVAL_V3_SW_RST_PIN};
     69          
     70          /* SPI MOSI Ports list*/
     71          GPIO_TypeDef* s_SpiMosiPortVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_SPI_PERIPH_MOSI_PORT, SDK_EVAL_V3_SPI_PERIPH_MOSI_PORT};
     72          /* SPI MOSI Pins list */
     73          static const uint32_t s_SpiMosiPinVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_SPI_PERIPH_MOSI_PIN, SDK_EVAL_V3_SPI_PERIPH_MOSI_PIN};
     74          
     75          /* SPI MOSI AF Pin Source list */
     76          static uint16_t s_SpiMosiPinSourceVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_SPI_PERIPH_MOSI_RCC_SOURCE, SDK_EVAL_V3_SPI_PERIPH_MOSI_RCC_SOURCE};
     77          
     78          /* SPI MOSI AF list */
     79          static uint8_t s_SpiMosiAFVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_SPI_PERIPH_MOSI_AF ,SDK_EVAL_V3_SPI_PERIPH_MOSI_AF};
     80          
     81          /* SPI MISO Ports list*/
     82          GPIO_TypeDef* s_SpiMisoPortVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_SPI_PERIPH_MISO_PORT, SDK_EVAL_V3_SPI_PERIPH_MISO_PORT};
     83          /* SPI MISO Pins list */
     84          static const uint32_t s_SpiMisoPinVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_SPI_PERIPH_MISO_PIN, SDK_EVAL_V3_SPI_PERIPH_MISO_PIN};
     85          
     86          /* SPI MISO AF Pin Source list */
     87          static uint16_t s_SpiMisoPinSourceVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_SPI_PERIPH_MISO_RCC_SOURCE,SDK_EVAL_V3_SPI_PERIPH_MISO_RCC_SOURCE};
     88          
     89          /* SPI MISO AF list */
     90          static uint8_t s_SpiMisoAFVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_SPI_PERIPH_MISO_AF,SDK_EVAL_V3_SPI_PERIPH_MISO_AF};
     91          
     92          
     93          /* SPI SCLK Ports list*/
     94          GPIO_TypeDef* s_SpiSclkPortVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_SPI_PERIPH_SCLK_PORT, SDK_EVAL_V3_SPI_PERIPH_SCLK_PORT};
     95          /* SPI SCLK Pins list */
     96          static const uint32_t s_SpiSclkPinVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_SPI_PERIPH_SCLK_PIN, SDK_EVAL_V3_SPI_PERIPH_SCLK_PIN};
     97          
     98          
     99          /* SPI SCLK AF Pin Source list */
    100          static uint16_t s_SpiSclkPinSourceVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_SPI_PERIPH_SCLK_RCC_SOURCE ,SDK_EVAL_V3_SPI_PERIPH_SCLK_RCC_SOURCE};
    101          
    102          /* SPI SCLK AF list */
    103          static uint8_t s_SpiSclkAFVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_SPI_PERIPH_SCLK_AF ,SDK_EVAL_V3_SPI_PERIPH_SCLK_AF};
    104          
    105          /* SPI IRQ lists */
    106          GPIO_TypeDef* s_SpiIrqPortVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_SPI_PERIPH_IRQ_PORT, SDK_EVAL_VD1_SPI_PERIPH_IRQ_PORT};
    107          
    108          static const uint32_t s_SpiIrqPinVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_SPI_PERIPH_IRQ_PIN, SDK_EVAL_VD1_SPI_PERIPH_IRQ_PIN};
    109          
    110          static const uint32_t s_SpiIrqClkVersion[SDK_PLATFORMS_NUMBER]= {SDK_EVAL_V3_SPI_PERIPH_IRQ_RCC, SDK_EVAL_VD1_SPI_PERIPH_IRQ_RCC};
    111          
    112          static const uint32_t s_SpiIrqExtiLineVersion[SDK_PLATFORMS_NUMBER]= {SDK_EVAL_V3_EXTI_LINE, SDK_EVAL_VD1_EXTI_LINE};
    113          
    114          static const uint8_t s_SpiIrqPortSourceVersion[SDK_PLATFORMS_NUMBER]= {SDK_EVAL_V3_EXTI_PORT_SOURCE, SDK_EVAL_VD1_EXTI_PORT_SOURCE};
    115          
    116          static const uint8_t s_SpiIrqPinSourceVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_EXTI_PIN_SOURCE, SDK_EVAL_VD1_EXTI_PIN_SOURCE};
    117          
    118          static const IRQn_Type s_SpiIrqIrqnVersion[SDK_PLATFORMS_NUMBER] = {SDK_EVAL_V3_EXTI_IRQn, SDK_EVAL_VD1_EXTI_IRQn}; 
    119          
    120          /* SPI Port */
    121          static SPI_TypeDef* s_SpiPort;
    122          
    123          
    124          /* SPI CS Port */
    125          static GPIO_TypeDef* s_SpiCsPort;
    126          /* SPI CS Pin */
    127          static uint32_t s_SpiCsPin;
    128          
    129          
    130          /* SPI Reset Port */
    131          static GPIO_TypeDef* s_SpiRstPort;
    132          /* SPI Reset Pin */
    133          static uint32_t s_SpiRstPin;
    134          
    135          /* SPI MOSI Port */
    136          static GPIO_TypeDef* s_SpiMosiPort;
    137          /* SPI MOSI Pin */
    138          static uint32_t s_SpiMosiPin;
    139          
    140          /* SPI MOSI AF Pin Source */
    141          static uint16_t s_SpiMosiPinSource;
    142          
    143          /* SPI MOSI AF */
    144          static uint8_t s_SpiMosiAF;
    145          
    146          /* SPI MISO Port */
    147          static GPIO_TypeDef* s_SpiMisoPort;
    148          /* SPI MISO Pin */
    149          static uint32_t s_SpiMisoPin;
    150          
    151          /* SPI MISO AF Pin Source */
    152          static uint16_t s_SpiMisoPinSource;
    153          
    154          /* SPI MISO AF */
    155          static uint8_t s_SpiMisoAF;
    156          
    157          /* SPI SCLK Port */
    158          static GPIO_TypeDef* s_SpiSclkPort;
    159          /* SPI SCLK Pin */
    160          static uint32_t s_SpiSclkPin;
    161          
    162          /* SPI SCLK AF Pin Source */
    163          static uint16_t s_SpiSclkPinSource;
    164          
    165          /* SPI SCLK AF */
    166          static uint8_t s_SpiSclkAF;
    167          
    168          /* SPI IRQ pin, exti line, port source, pin source, irqn */
    169          /* SPI clock */
    170          static uint32_t s_SpiIrqClk; 
    171          static GPIO_TypeDef* s_SpiIrqPort;
    172          static uint32_t s_SpiIrqPin;
    173          static uint32_t s_SpiIrqExtiLine;
    174          static uint8_t s_SpiIrqPortSource;
    175          static uint8_t s_SpiIrqPinSource;
    176          static IRQn_Type s_SpiIrqIrqn;
    177          
    178           #endif /* #ifndef USER_DEFINED_PLATFORM */
    179           
    180          /**
    181          * @}
    182          */
    183          
    184          /** @defgroup SPI_Functions
    185          * @{
    186          */
    187          
    188          
    189          /* SPI Platform Configuration Values: BlueNRG Development Kits Run-time support or simplified user defined platform support */
    190          
    191          /* SPI Port*/
    192          static SPI_TypeDef* Get_SpiPort()
    193          {
    194          #ifdef USER_DEFINED_PLATFORM
    195            return(SPI);
    196          #else
    197            return(s_SpiPort);
    198          #endif
    199          }
    200          
    201          /* SPI CS Port */
    202          static GPIO_TypeDef* Get_SpiCsPort()
    203          {
    204          #ifdef USER_DEFINED_PLATFORM
    205            return(SPI_CS_GPIO_PORT);
    206          #else
    207            return(s_SpiCsPort);
    208          #endif
    209          }
    210          
    211          /* SPI CS Pin */
    212          static uint32_t Get_SpiCsPin()
    213          {
    214          #ifdef USER_DEFINED_PLATFORM
    215            return(SPI_CS_GPIO_PIN);
    216          #else
    217            return(s_SpiCsPin);
    218          #endif
    219          }
    220          
    221          /* SPI Reset Port */
    222          static GPIO_TypeDef* Get_SpiRstPort()
    223          {
    224          #ifdef USER_DEFINED_PLATFORM
    225            return(SW_RST_GPIO_PORT);
    226          #else
    227            return(s_SpiRstPort);
    228          #endif
    229          }
    230          
    231          /* SPI Reset Pin */
    232          static uint32_t Get_SpiRstPin()
    233          {
    234          #ifdef USER_DEFINED_PLATFORM
    235            return(SW_RST_GPIO_PIN);
    236          #else
    237            return(s_SpiRstPin);
    238          #endif
    239          }
    240          
    241          /* SPI MOSI Port */
    242          static GPIO_TypeDef* Get_SpiMosiPort()
    243          {
    244          #ifdef USER_DEFINED_PLATFORM
    245            return(SPI_MOSI_GPIO_PORT);
    246          #else
    247            return(s_SpiMosiPort);
    248          #endif
    249          }
    250          
    251          /* SPI MOSI Pin */
    252          static uint32_t Get_SpiMosiPin()
    253          {
    254          #ifdef USER_DEFINED_PLATFORM
    255            return(SPI_MOSI_GPIO_PIN);
    256          #else
    257            return(s_SpiMosiPin);
    258          #endif
    259          }
    260          
    261          /* SPI MOSI AF Pin Source */
    262          static uint16_t Get_SpiMosiPinSource()
    263          {
    264          #ifdef USER_DEFINED_PLATFORM
    265            return(SPI_MOSI_GPIO_SOURCE);
    266          #else
    267            return(s_SpiMosiPinSource);
    268          #endif
    269          }
    270          
    271          /* SPI MOSI AF */
    272          static uint8_t Get_SpiMosiAF()
    273          {
    274          #ifdef USER_DEFINED_PLATFORM
    275            return(SPI_MOSI_GPIO_AF);
    276          #else
    277            return(s_SpiMosiAF);
    278          #endif
    279          }
    280          
    281          /* SPI MISO Port */
    282          static GPIO_TypeDef* Get_SpiMisoPort()
    283          {
    284          #ifdef USER_DEFINED_PLATFORM
    285            return(SPI_MISO_GPIO_PORT);
    286          #else
    287            return(s_SpiMisoPort);
    288          #endif
    289          }
    290          
    291          /* SPI MISO Pin */
    292          static uint32_t Get_SpiMisoPin()
    293          {
    294          #ifdef USER_DEFINED_PLATFORM
    295            return(SPI_MISO_GPIO_PIN);
    296          #else
    297            return(s_SpiMisoPin);
    298          #endif
    299          }
    300          
    301          /* SPI MISO AF Pin Source */
    302          static uint16_t Get_SpiMisoPinSource()
    303          {
    304          #ifdef USER_DEFINED_PLATFORM
    305            return(SPI_MISO_GPIO_SOURCE);
    306          #else
    307            return(s_SpiMisoPinSource);
    308          #endif
    309          }
    310          
    311          /* SPI MISO AF */
    312          static uint8_t Get_SpiMisoAF()
    313          {
    314          #ifdef USER_DEFINED_PLATFORM
    315            return(SPI_MISO_GPIO_AF);
    316          #else
    317            return(s_SpiMisoAF);
    318          #endif
    319          }
    320          
    321          /* SPI SCLK Port */
    322          static GPIO_TypeDef* Get_SpiSclkPort()
    323          {
    324          #ifdef USER_DEFINED_PLATFORM
    325            return(SPI_SCLK_GPIO_PORT);
    326          #else
    327            return(s_SpiSclkPort);
    328          #endif
    329          }
    330          
    331          /* SPI SCLK Pin */
    332          static uint32_t Get_SpiSclkPin()
    333          {
    334          #ifdef USER_DEFINED_PLATFORM
    335            return(SPI_SCLK_GPIO_PIN);
    336          #else
    337            return(s_SpiSclkPin);
    338          #endif
    339          }
    340          
    341          /* SPI SCLK AF Pin Source */
    342          static uint16_t Get_SpiSclkPinSource()
    343          {
    344          #ifdef USER_DEFINED_PLATFORM
    345            return(SPI_SCLK_GPIO_SOURCE);
    346          #else
    347            return(s_SpiSclkPinSource);
    348          #endif
    349          }
    350          
    351          /* SPI SCLK AF */
    352          static uint8_t Get_SpiSclkAF()
    353          {
    354          #ifdef USER_DEFINED_PLATFORM
    355            return(SPI_SCLK_GPIO_AF);
    356          #else
    357            return(s_SpiSclkAF);
    358          #endif
    359          }
    360          
    361          /* SPI IRQ pin, exti line, port source, pin source, irqn */
    362          
    363          /* SPI IRQ Port */
    364          static GPIO_TypeDef* Get_SpiIrqPort()
    365          {
    366          #ifdef USER_DEFINED_PLATFORM
    367            return(SPI_IRQ_GPIO_PORT);
    368          #else
    369            return(s_SpiIrqPort);
    370          #endif
    371          }
    372          
    373          /* SPI IRQ Pin */
    374          static uint32_t Get_SpiIrqPin()
    375          {
    376          #ifdef USER_DEFINED_PLATFORM
    377            return(SPI_IRQ_GPIO_PIN);
    378          #else
    379            return(s_SpiIrqPin);
    380          #endif
    381          }
    382          /* SPI IRQ Exti Line */
    383          static uint32_t Get_SpiIrqExtiLine()
    384          {
    385          #ifdef USER_DEFINED_PLATFORM
    386            return(SPI_IRQ_EXTI_LINE);
    387          #else
    388            return(s_SpiIrqExtiLine);
    389          #endif
    390          }
    391          
    392          /* SPI IRQ Port Source */
    393          static uint8_t Get_SpiIrqPortSource()
    394          {
    395          #ifdef USER_DEFINED_PLATFORM
    396            return(SPI_IRQ_EXTI_PORT_SOURCE); 
    397          #else
    398            return(s_SpiIrqPortSource);
    399          #endif
    400          }
    401          
    402          /* SPI IRQ Pin Source */
    403          static uint8_t Get_SpiIrqPinSource()
    404          {
    405          #ifdef USER_DEFINED_PLATFORM
    406            return(SPI_IRQ_EXTI_PIN_SOURCE);
    407          #else
    408            return(s_SpiIrqPinSource);
    409          #endif
    410          }
    411          
    412          /* SPI IRQ line */
    413          static IRQn_Type Get_SpiIrqIrqn()
    414          {
    415          #ifdef USER_DEFINED_PLATFORM
    416            return(SPI_IRQ_EXTI_IRQn);
    417          #else
    418            return(s_SpiIrqIrqn);
    419          #endif
    420          }
    421          
    422          
    423          /**
    424          * @brief  Basic SPI configuration according to the selected platform 
    425          * @param  None
    426          * @retval status
    427          */
    428          static int8_t SPI_Configure_Platform(void)
    429          {
    430          #ifdef USER_DEFINED_PLATFORM 
    431          
    432            /* SPI Periph clock enable */
    433          #ifdef SPI_CLK_APB1
    434            RCC_APB1PeriphClockCmd(SPI_CLK_APB1, ENABLE);
    435          #else
    436            RCC_APB2PeriphClockCmd(SPI_CLK_APB2, ENABLE); 
    437          #endif 
    438              
    439            /* Configure SPI Periph Clocks */
    440            RCC_AHBPeriphClockCmd(SPI_CS_GPIO_CLK | SPI_MOSI_GPIO_CLK | SPI_MISO_GPIO_CLK |
    441                                  SPI_SCLK_GPIO_CLK | SW_RST_GPIO_CLK | SPI_IRQ_GPIO_CLK, ENABLE);
    442          
    443          #else /* BlueNRG SPI Driver configuration for BlueNRG Development Kits platforms */
    444          
    445            s_SpiPort = s_SpiPortVersion[SdkEvalGetVersion()];
    446            
    447            s_SpiCsPort = s_SpiCsPortVersion[SdkEvalGetVersion()];
    448            s_SpiCsPin = s_SpiCsPinVersion[SdkEvalGetVersion()];
    449            
    450            s_SpiRstPort = s_SpiRstPortVersion[SdkEvalGetVersion()];
    451            s_SpiRstPin = s_SpiRstPinVersion[SdkEvalGetVersion()];
    452          
    453            s_SpiMosiPort = s_SpiMosiPortVersion[SdkEvalGetVersion()];
    454            s_SpiMosiPin = s_SpiMosiPinVersion[SdkEvalGetVersion()];
    455          
    456            s_SpiMosiPinSource = s_SpiMosiPinSourceVersion[SdkEvalGetVersion()];
    457            s_SpiMosiAF = s_SpiMosiAFVersion[SdkEvalGetVersion()];
    458          
    459            s_SpiMisoPort = s_SpiMisoPortVersion[SdkEvalGetVersion()];
    460            s_SpiMisoPin = s_SpiMisoPinVersion[SdkEvalGetVersion()];
    461          
    462            s_SpiMisoPinSource = s_SpiMisoPinSourceVersion[SdkEvalGetVersion()];
    463            s_SpiMisoAF = s_SpiMisoAFVersion[SdkEvalGetVersion()];
    464          
    465            s_SpiSclkPort = s_SpiSclkPortVersion[SdkEvalGetVersion()];
    466            s_SpiSclkPin = s_SpiSclkPinVersion[SdkEvalGetVersion()];
    467          
    468            s_SpiSclkPinSource = s_SpiSclkPinSourceVersion[SdkEvalGetVersion()];
    469            s_SpiSclkAF = s_SpiSclkAFVersion[SdkEvalGetVersion()];
    470          
    471            s_SpiIrqClk = s_SpiIrqClkVersion[SdkEvalGetVersion()];
    472            
    473            s_SpiIrqPort = s_SpiIrqPortVersion[SdkEvalGetVersion()];
    474            s_SpiIrqPin = s_SpiIrqPinVersion[SdkEvalGetVersion()];
    475            
    476            s_SpiIrqExtiLine = s_SpiIrqExtiLineVersion[SdkEvalGetVersion()];
    477            
    478            s_SpiIrqPortSource = s_SpiIrqPortSourceVersion[SdkEvalGetVersion()];
    479            s_SpiIrqPinSource = s_SpiIrqPinSourceVersion[SdkEvalGetVersion()];
    480            
    481            s_SpiIrqIrqn = s_SpiIrqIrqnVersion[SdkEvalGetVersion()]; 
    482            
    483            if((SdkEvalGetVersion() == SDK_EVAL_VERSION_3) || (SdkEvalGetVersion() == SDK_EVAL_VERSION_D1))
    484            {
    485              /* Enable SPI2 periph and SCLK, MOSI, MISO and CS GPIO clocks */
    486              RCC_APB1PeriphClockCmd(SDK_EVAL_V3_SPI_PERIPH_RCC, ENABLE);     
    487              
    488              RCC_AHBPeriphClockCmd(SDK_EVAL_V3_SPI_PERIPH_CS_RCC | SDK_EVAL_V3_SPI_PERIPH_MOSI_RCC | SDK_EVAL_V3_SPI_PERIPH_MISO_RCC |
    489                                    SDK_EVAL_V3_SPI_PERIPH_SCLK_RCC | SDK_EVAL_V3_SW_RST_GPIO_RCC | s_SpiIrqClk, ENABLE);
    490            }
    491            else
    492            {
    493              /* Platform is not supported */
    494              return(-1); 
    495            }  
    496          
    497          #endif /* USER_DEFINED_PLATFORM */
    498          
    499            return(0);
    500          }/* end SPI_Configure_Platform() */
    501          
    502          /**
    503          * @brief  Return SPI IRQ pin value
    504          * @param  None
    505          * @retval SPI IRQ pin value
    506          */
    507          uint8_t SdkEvalSPI_Irq_Pin(void) 
    508          {
    509            return (GPIO_ReadInputDataBit(Get_SpiIrqPort(), Get_SpiIrqPin()));
    510          }/* end SdkEvalSPI_Irq_Pin() */
    511          
    512          /**
    513          * @brief  Initializes the SPI 
    514          * @param  xSpiMode: SPI mode - GPIO (polling) or EXTI (IRQ)
    515          * @retval status
    516          */
    517          int8_t SdkEvalSpiInit(SdkEvalSpiMode xSpiMode) 
    518          {
    519            int8_t retValue; 
    520            SPI_InitTypeDef SPI_InitStructure;
    521            GPIO_InitTypeDef GPIO_InitStructure;
    522            EXTI_InitTypeDef EXTI_InitStructure;
    523            NVIC_InitTypeDef NVIC_InitStructure;
    524            
    525            /* Configure SPI initialization parameters depending on the selected 
    526               platform: BlueNRG EVal Kits or User Defined platforms */
    527            retValue = SPI_Configure_Platform();
    528            if (retValue == -1)
    529              /* BlueNRG Development Kit platfrom is not supported */
    530              return (retValue);
    531          
    532            /* Configure the AF for MOSI, MISO and SCLK GPIO pins */
    533            GPIO_PinAFConfig(Get_SpiMosiPort(), Get_SpiMosiPinSource(), Get_SpiMosiAF());
    534            GPIO_PinAFConfig(Get_SpiMisoPort(), Get_SpiMisoPinSource(), Get_SpiMisoAF());
    535            GPIO_PinAFConfig(Get_SpiSclkPort(), Get_SpiSclkPinSource(), Get_SpiSclkAF());
    536          
    537            /*!< Configure BlueNRG reset line */
    538            GPIO_WriteBit(Get_SpiRstPort(),Get_SpiRstPin(), Bit_SET);
    539            GPIO_InitStructure.GPIO_Pin = Get_SpiRstPin();
    540            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    541            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_400KHz;
    542            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    543            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    544            GPIO_Init(Get_SpiRstPort(), &GPIO_InitStructure);
    545            BlueNRG_Power_Down(); //Added to avoid spurious interrupt from the BlueNRG
    546          
    547            /*!< Configure SPI pins: SCLK */
    548            GPIO_InitStructure.GPIO_Pin = Get_SpiSclkPin();
    549            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    550            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
    551            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    552            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    553            GPIO_Init(Get_SpiSclkPort(), &GPIO_InitStructure);
    554          
    555            /*!< Configure SPI pins: MISO */
    556            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
    557            GPIO_InitStructure.GPIO_Pin = Get_SpiMisoPin();
    558            GPIO_Init(Get_SpiMisoPort(), &GPIO_InitStructure);
    559          
    560            /*!< Configure SPI pins: MOSI */
    561            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    562            GPIO_InitStructure.GPIO_Pin = Get_SpiMosiPin();
    563            GPIO_Init(Get_SpiMosiPort(), &GPIO_InitStructure);
    564          
    565            /*!< Configure SPI pins: CS pin */
    566            GPIO_InitStructure.GPIO_Pin = Get_SpiCsPin();
    567            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    568            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    569            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 
    570            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
    571              
    572            GPIO_WriteBit(Get_SpiCsPort(), Get_SpiCsPin(), Bit_SET);
    573              
    574            GPIO_Init(Get_SpiCsPort(), &GPIO_InitStructure);
    575            
    576            /*!< Configure SPI pins: IRQ pin */
    577            // Configuration for BlueNRG IRQ pin (5-wire SPI interface)
    578            GPIO_InitStructure.GPIO_Pin = Get_SpiIrqPin();
    579            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    580            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    581            GPIO_Init(Get_SpiIrqPort(), &GPIO_InitStructure);
    582            
    583            /*!< SPI Config */
    584            SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
    585            SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
    586            SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
    587            SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
    588            SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
    589            SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
    590          #if SYSCLK_FREQ > 20000000
    591            SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
    592          #else
    593            SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
    594          #endif
    595          
    596            SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
    597            SPI_InitStructure.SPI_CRCPolynomial = 7;
    598            SPI_Init(Get_SpiPort(), &SPI_InitStructure);
    599            
    600            SPI_Cmd(Get_SpiPort(), ENABLE); /*!< SPI enable */
    601            
    602            if (xSpiMode == SPI_MODE_EXTI)
    603            {
    604          
    605              SYSCFG_EXTILineConfig(Get_SpiIrqPortSource(), Get_SpiIrqPinSource());
    606           
    607              EXTI_InitStructure.EXTI_Line = Get_SpiIrqExtiLine();
    608              EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    609              EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    610              EXTI_InitStructure.EXTI_LineCmd = ENABLE;    
    611              EXTI_Init(&EXTI_InitStructure);
    612            
    613              EXTI_ClearFlag(Get_SpiIrqExtiLine());
    614            
    615              NVIC_InitStructure.NVIC_IRQChannel = Get_SpiIrqIrqn();
    616              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    617              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    618              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    619              NVIC_Init(&NVIC_InitStructure);
    620            }
    621            return(0);
    622          }/* end SdkEvalSpiInit() */
    623          
    624          /**
    625            * @brief  Set GPIO pin in Hi-Z state.
    626            * @param  GPIOx: GPIO port
    627            *         GPIO_Pin: GPIo pin        
    628            * @retval None
    629            */
    630          static void GPIO_SetHiZ(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    631          {
    632            GPIO_InitTypeDef  GPIO_InitStructure;
    633            
    634            /* Configure GPIO pin as output open drain HI-Z state */
    635            GPIO_InitStructure.GPIO_Pin = GPIO_Pin;
    636            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    637            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_400KHz;
    638            GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    639            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    640            GPIO_Init(GPIOx, &GPIO_InitStructure);
    641            GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_SET);
    642          }/* end GPIO_SetHiZ() */
    643          
    644          #if ENABLE_SPI_FIX
    645          /**
    646            * @brief  Utility function for delay
    647            * @param  None 
    648            * @retval None
    649            * NOTE: TODO: implement with clock-independent function.
    650            */
    651          static void us150Delay()
    652          {
    653          #if SYSCLK_FREQ == 4000000
    654          for(volatile int i = 0; i < 35; i++)__NOP();
    655          #elif SYSCLK_FREQ == 32000000
    656          for(volatile int i = 0; i < 420; i++)__NOP();
    657          #else
    658          #error Implement delay function.
    659          #endif    
    660          }
    661          #endif /* end ENABLE_SPI_FIX */
    662          
    663          /**
    664            * @brief  Disable SPI
    665            * @param  None
    666            * @retval None
    667            */
    668          void SdkEvalSpiDisable(void)
    669          {
    670            EXTI_InitTypeDef  EXTI_InitStructure;
    671            
    672          #ifdef USER_DEFINED_PLATFORM 
    673          
    674            /* SPI Periph clock enable */
    675          #ifdef SPI_CLK_APB1
    676            RCC_APB1PeriphClockCmd(SPI_CLK_APB1, DISABLE);
    677          #else
    678            RCC_APB2PeriphClockCmd(SPI_CLK_APB2, DISABLE);
    679          #endif 
    680              
    681          #else /* BlueNRG SPI Driver configuration for BlueNRG Development Kits platforms */
    682          
    683            if((SdkEvalGetVersion() == SDK_EVAL_VERSION_3) || (SdkEvalGetVersion() == SDK_EVAL_VERSION_D1))
    684            {
    685              /*!< SPI Periph clock disable */
    686              RCC_APB1PeriphClockCmd(SDK_EVAL_V3_SPI_PERIPH_RCC, DISABLE);  
    687            }
    688            
    689          #endif
    690          
    691            SPI_Cmd(Get_SpiPort(), DISABLE); /*!< SPI disable */ 
    692            
    693            /* Configure pins as output open drain HI-Z state */
    694            GPIO_SetHiZ(Get_SpiSclkPort(), Get_SpiSclkPin());
    695            GPIO_SetHiZ(Get_SpiMosiPort(), Get_SpiMosiPin());
    696            GPIO_SetHiZ(Get_SpiMisoPort(), Get_SpiMisoPin());
    697            GPIO_SetHiZ(Get_SpiCsPort(), Get_SpiCsPin());
    698            
    699            /* TO be done: only when EXTI_MODE is done at init time ? */
    700            EXTI_InitStructure.EXTI_Line = Get_SpiIrqExtiLine();
    701            EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    702            EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    703            EXTI_InitStructure.EXTI_LineCmd = DISABLE;
    704            EXTI_Init(&EXTI_InitStructure);
    705          }/* end SdkEvalSpiDisable() */
    706          
    707          /**
    708            * @brief  Reset the BlueNRG
    709            * @param  None
    710            * @retval None
    711            */
    712          void BlueNRG_RST(void)
    713          {   
    714            GPIO_WriteBit(Get_SpiRstPort(), Get_SpiRstPin(), Bit_RESET);
    715            /* 5 ms delay */
    716            Clock_Wait(5);
    717            GPIO_WriteBit(Get_SpiRstPort(), Get_SpiRstPin(), Bit_SET);
    718            Clock_Wait(5);  
    719          }/* end BlueNRG_RST() */
    720          
    721          /**
    722            * @brief  Power down the BlueNRG (reset).
    723            * @param  None
    724            * @retval None
    725            */
    726          void BlueNRG_Power_Down(void)
    727          {
    728            GPIO_WriteBit(Get_SpiRstPort(), Get_SpiRstPin(), Bit_RESET);  
    729          
    730          }/* end BlueNRG_Power_Down() */
    731          
    732          /**
    733            * @brief  Power up the BlueNRG (release reset).
    734            * @param  None
    735            * @retval None
    736            */
    737          void BlueNRG_Power_Up(void)
    738          {
    739            GPIO_WriteBit(Get_SpiRstPort(), Get_SpiRstPin(), Bit_SET);
    740            Clock_Wait(5);
    741          }/* end BlueNRG_Power_Up() */
    742          
    743          /**
    744            * @brief  Reports if the BlueNRG has data for the host micro.
    745            * @param  None
    746            * @retval TRUE if data are present, FALSE otherwise
    747            */
    748          uint8_t BlueNRG_DataPresent(void)
    749          {
    750            if (GPIO_ReadInputDataBit(Get_SpiIrqPort(), Get_SpiIrqPin()) == SET)
    751                return TRUE;
    752            else  
    753                return FALSE;
    754          } /* end BlueNRG_DataPresent() */
    755          
    756          /**
    757          * @brief  Disable SPI IRQ
    758          * @param  None
    759          * @retval None
    760          */
    761          void Disable_SPI_IRQ(void)
    762          {  
    763            NVIC_DisableIRQ(Get_SpiIrqIrqn());
    764          }/* end Disable_SPI_IRQ() */
    765          
    766          /**
    767          * @brief  Enable SPI IRQ
    768          * @param  None
    769          * @retval None
    770          */
    771          void Enable_SPI_IRQ(void)
    772          {  
    773            NVIC_EnableIRQ(Get_SpiIrqIrqn());
    774          }/* end Enable_SPI_IRQ() */
    775          
    776          /**
    777          * @brief  Clear Pending SPI IRQ
    778          * @param  None
    779          * @retval None
    780          */
    781          void Clear_SPI_IRQ(void)
    782          {
    783              NVIC_ClearPendingIRQ(Get_SpiIrqIrqn());    
    784          }/* end Clear_SPI_IRQ() */
    785          
    786          /**
    787          * @brief  Clear Exti line for SPI IRQ
    788          * @param  None
    789          * @retval None
    790          */
    791          void Clear_SPI_EXTI_Flag()
    792          {
    793            EXTI_ClearFlag(Get_SpiIrqExtiLine());
    794          }/* end Clear_SPI_EXTI_Flag() */
    795          
    796          /**
    797            * @brief  Activate internal bootloader using pin.
    798            * @param  None
    799            * @retval None
    800            */
    801          void BlueNRG_HW_Bootloader(void)
    802          {
    803              GPIO_InitTypeDef  GPIO_InitStructure;
    804              
    805              Disable_SPI_IRQ();
    806              
    807              GPIO_InitStructure.GPIO_Pin = Get_SpiIrqPin();
    808              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    809              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_400KHz;
    810              GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    811              GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    812              GPIO_Init(Get_SpiIrqPort(), &GPIO_InitStructure);
    813              GPIO_WriteBit(Get_SpiIrqPort(), Get_SpiIrqPin(), Bit_SET);
    814                
    815              GPIO_WriteBit(Get_SpiRstPort(), Get_SpiRstPin(), Bit_RESET);
    816              /* 5 ms delay */
    817              Clock_Wait(5);
    818              GPIO_WriteBit(Get_SpiRstPort(), Get_SpiRstPin(), Bit_SET);
    819              Clock_Wait(5);
    820              
    821              /* Restore port configuration. */    
    822              GPIO_InitStructure.GPIO_Pin = Get_SpiIrqPin();
    823              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    824              GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    825              GPIO_Init(Get_SpiIrqPort(), &GPIO_InitStructure);
    826              
    827              Enable_SPI_IRQ();
    828          }
    829          
    830          /**
    831          * @brief  Read from BlueNRG SPI buffer and store data into local buffer 
    832          * @param  buffer:    buffer where data from SPI are stored
    833          *         buff_size: buffer size
    834          * @retval number of read bytes
    835          */
    836          int32_t BlueNRG_SPI_Read_All(uint8_t *buffer, uint8_t buff_size)
    837          {
    838              uint16_t byte_count;
    839              uint8_t i = 0;
    840              uint8_t len = 0;
    841              
    842              
    843              uint8_t header_master[5] = {0x0b, 0x00, 0x00, 0x00, 0x00};
    844              uint8_t header_slave[5];
    845              
    846              GPIO_WriteBit(Get_SpiCsPort(), Get_SpiCsPin(), Bit_RESET);
    847              
    848              /* Read the header */
    849              for (i = 0; i < 5; i++)
    850              { 
    851                  SPI_I2S_SendData(Get_SpiPort(), header_master[i]); 
    852                  while(SPI_I2S_GetFlagStatus(Get_SpiPort(), SPI_I2S_FLAG_TXE) == RESET);
    853                  while(SPI_I2S_GetFlagStatus(Get_SpiPort(), SPI_I2S_FLAG_RXNE) == RESET);
    854                  header_slave[i] = SPI_I2S_ReceiveData(Get_SpiPort());
    855              }
    856              
    857              if (header_slave[0] == 0x02) {
    858                  // device is ready
    859                  
    860                  byte_count = (header_slave[4]<<8)|header_slave[3];
    861                  
    862                  if (byte_count > 0) {
    863                      
    864                      // avoid to read more data that size of the buffer
    865                      if (byte_count > buff_size)
    866                          byte_count = buff_size;
    867                      
    868                      for (len = 0; len < byte_count; len++)
    869                      { 
    870                          SPI_I2S_SendData(Get_SpiPort(), 0xFF); 
    871                          while(SPI_I2S_GetFlagStatus(Get_SpiPort(), SPI_I2S_FLAG_TXE) == RESET);
    872                          while(SPI_I2S_GetFlagStatus(Get_SpiPort(), SPI_I2S_FLAG_RXNE) == RESET);
    873                          buffer[len] = SPI_I2S_ReceiveData(Get_SpiPort());
    874                      }
    875                  }    
    876              }
    877              
    878              // Release CS line.
    879              GPIO_WriteBit(Get_SpiCsPort(), Get_SpiCsPin(), Bit_SET);
    880              
    881              return len;
    882              
    883          }/* end BlueNRG_SPI_Read_All() */
    884          
    885          
    886          /**
    887          * @brief  Write data from local buffer to SPI
    888          * @param  data1:    first data buffer to be written
    889          *         data2:    second data buffer to be written
    890          *         Nb_bytes1: size of first data buffer to be written
    891          *         Nb_bytes2: size of second data buffer to be written
    892          * @retval number of read bytes
    893          */
    894          int32_t BlueNRG_SPI_Write(uint8_t* data1, uint8_t* data2, uint8_t Nb_bytes1, uint8_t Nb_bytes2)
    895          {  
    896              uint32_t i;
    897              int32_t result = 0;
    898              
    899              unsigned char header_master[5] = {0x0a, 0x00, 0x00, 0x00, 0x00};
    900              unsigned char header_slave[5]  = {0xaa, 0x00, 0x00, 0x00, 0x00};
    901              
    902              Disable_SPI_IRQ();
    903              
    904          #if ENABLE_SPI_FIX
    905              GPIO_InitTypeDef  GPIO_InitStructure;
    906              
    907              /* Pull IRQ high */
    908              GPIO_InitStructure.GPIO_Pin = Get_SpiIrqPin();
    909              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    910              GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    911              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;    
    912              GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    913              GPIO_Init(Get_SpiIrqPort(), &GPIO_InitStructure);
    914              GPIO_WriteBit(Get_SpiIrqPort(), Get_SpiIrqPin(), Bit_SET);
    915              /* Assert CS line after at least 112us */
    916              us150Delay();    
    917          #endif
    918              
    919              GPIO_WriteBit(Get_SpiCsPort(), Get_SpiCsPin(), Bit_RESET);
    920              
    921              for (i = 0; i < 5; i++)
    922              { 
    923                  SPI_I2S_SendData(Get_SpiPort(), header_master[i]); 
    924                  while(SPI_I2S_GetFlagStatus(Get_SpiPort(), SPI_I2S_FLAG_TXE) == RESET);
    925                  while(SPI_I2S_GetFlagStatus(Get_SpiPort(), SPI_I2S_FLAG_RXNE) == RESET);
    926                  header_slave[i] = SPI_I2S_ReceiveData(Get_SpiPort());
    927              }
    928              
    929          #if ENABLE_SPI_FIX
    930              /* IRQ input again */
    931              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    932              GPIO_Init(Get_SpiIrqPort(), &GPIO_InitStructure);
    933          #endif
    934              
    935              if (header_slave[0] == 0x02) {
    936                  // SPI is ready
    937                  if (header_slave[1] >= (Nb_bytes1+Nb_bytes2)) {
    938                      //  Buffer is big enough
    939                      for (i = 0; i < Nb_bytes1; i++) { 
    940                          SPI_I2S_SendData(Get_SpiPort(), *(data1 + i)); 
    941                          while(SPI_I2S_GetFlagStatus(Get_SpiPort(), SPI_I2S_FLAG_TXE) == RESET);
    942                          while(SPI_I2S_GetFlagStatus(Get_SpiPort(), SPI_I2S_FLAG_RXNE) == RESET);
    943                          SPI_I2S_ReceiveData(Get_SpiPort());
    944                      }
    945                      for (i = 0; i < Nb_bytes2; i++) { 
    946                          SPI_I2S_SendData(Get_SpiPort(), *(data2 + i)); 
    947                          while(SPI_I2S_GetFlagStatus(Get_SpiPort(), SPI_I2S_FLAG_TXE) == RESET);
    948                          while(SPI_I2S_GetFlagStatus(Get_SpiPort(), SPI_I2S_FLAG_RXNE) == RESET);
    949                          SPI_I2S_ReceiveData(Get_SpiPort());
    950                      }
    951                  } else {
    952                      // Buffer is too small
    953                      result = -2;
    954                  }
    955              } else {
    956                  // SPI is not ready
    957                  result = -1;
    958              }
    959              
    960              // Release CS line.
    961              GPIO_WriteBit(Get_SpiCsPort(), Get_SpiCsPin(), Bit_SET);
    962              
    963              Enable_SPI_IRQ();
    964              
    965              return result;
    966          }/* end BlueNRG_SPI_Write() */
    967          
    968          /**
    969          * @}
    970          */
    971          
    972          
    973          /**
    974          * @}
    975          */
    976          
    977          
    978          /**
    979          * @}
    980          */
    981          
    982          
    983          
    984          /******************* (C) COPYRIGHT 2014 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BlueNRG_DataPresent
         8   -> GPIO_ReadInputDataBit
      24   BlueNRG_HW_Bootloader
        24   -> Clock_Wait
        24   -> GPIO_Init
        24   -> GPIO_WriteBit
       0   BlueNRG_Power_Down
         0   -> GPIO_WriteBit
       8   BlueNRG_Power_Up
         0   -> Clock_Wait
         8   -> GPIO_WriteBit
       8   BlueNRG_RST
         0   -> Clock_Wait
         8   -> Clock_Wait
         8   -> GPIO_WriteBit
      48   BlueNRG_SPI_Read_All
        48   -> GPIO_WriteBit
        48   -> SPI_I2S_GetFlagStatus
        48   -> SPI_I2S_ReceiveData
        48   -> SPI_I2S_SendData
      72   BlueNRG_SPI_Write
        72   -> GPIO_Init
        72   -> GPIO_WriteBit
        72   -> SPI_I2S_GetFlagStatus
        72   -> SPI_I2S_ReceiveData
        72   -> SPI_I2S_SendData
       0   Clear_SPI_EXTI_Flag
         0   -> EXTI_ClearFlag
       0   Clear_SPI_IRQ
       0   Disable_SPI_IRQ
       0   Enable_SPI_IRQ
       8   SPI_Configure_Platform
         8   -> RCC_AHBPeriphClockCmd
         8   -> RCC_APB1PeriphClockCmd
         8   -> SdkEvalGetVersion
       0   SdkEvalSPI_Irq_Pin
         0   -> GPIO_ReadInputDataBit
      56   SdkEvalSpiDisable
        56   -> EXTI_Init
        56   -> GPIO_Init
        56   -> GPIO_WriteBit
        56   -> RCC_APB1PeriphClockCmd
        56   -> SPI_Cmd
        56   -> SdkEvalGetVersion
      56   SdkEvalSpiInit
        56   -> EXTI_ClearFlag
        56   -> EXTI_Init
        56   -> GPIO_Init
        56   -> GPIO_PinAFConfig
        56   -> GPIO_WriteBit
        56   -> NVIC_Init
        56   -> SPI_Cmd
        56   -> SPI_Configure_Platform
        56   -> SPI_Init
        56   -> SYSCFG_EXTILineConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {10, 0, 0, 0, 0}>
       8  ?<Constant {11, 0, 0, 0, 0}>
       8  ?<Constant {170, 0, 0, 0, 0}>
       4  ??DataTable28
       4  ??DataTable28_1
       4  ??DataTable28_2
       4  ??DataTable28_3
      30  BlueNRG_DataPresent
     162  BlueNRG_HW_Bootloader
      14  BlueNRG_Power_Down
      30  BlueNRG_Power_Up
      46  BlueNRG_RST
     194  BlueNRG_SPI_Read_All
     386  BlueNRG_SPI_Write
      10  Clear_SPI_EXTI_Flag
      26  Clear_SPI_IRQ
      26  Disable_SPI_IRQ
      26  Enable_SPI_IRQ
     366  SPI_Configure_Platform
      18  SdkEvalSPI_Irq_Pin
     276  SdkEvalSpiDisable
     394  SdkEvalSpiInit
       8  s_SpiCsPinVersion
       8  s_SpiIrqClkVersion
       8  s_SpiIrqExtiLineVersion
       2  s_SpiIrqIrqnVersion
       2  s_SpiIrqPinSourceVersion
       8  s_SpiIrqPinVersion
       2  s_SpiIrqPortSourceVersion
       8  s_SpiMisoPinVersion
     148  s_SpiMosiAF
          s_SpiMisoAF
          s_SpiSclkAF
          s_SpiIrqPortSource
          s_SpiIrqPinSource
          s_SpiIrqIrqn
          s_SpiMosiAFVersion
          s_SpiMisoAFVersion
          s_SpiSclkAFVersion
          s_SpiMosiPinSource
          s_SpiMisoPinSource
          s_SpiSclkPinSource
          s_SpiPortVersion
          s_SpiCsPortVersion
          s_SpiRstPortVersion
          s_SpiMosiPortVersion
          s_SpiMosiPinSourceVersion
          s_SpiMisoPortVersion
          s_SpiMisoPinSourceVersion
          s_SpiSclkPortVersion
          s_SpiSclkPinSourceVersion
          s_SpiIrqPortVersion
          s_SpiPort
          s_SpiCsPort
          s_SpiCsPin
          s_SpiRstPort
          s_SpiRstPin
          s_SpiMosiPort
          s_SpiMosiPin
          s_SpiMisoPort
          s_SpiMisoPin
          s_SpiSclkPort
          s_SpiSclkPin
          s_SpiIrqClk
          s_SpiIrqPort
          s_SpiIrqPin
          s_SpiIrqExtiLine
       8  s_SpiMosiPinVersion
       8  s_SpiRstPinVersion
       8  s_SpiSclkPinVersion

 
   148 bytes in section .data
 2 114 bytes in section .text
 
 2 114 bytes of CODE memory
   148 bytes of DATA memory

Errors: none
Warnings: none
