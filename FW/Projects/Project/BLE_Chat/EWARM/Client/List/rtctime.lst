###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      31/Oct/2014  16:31:38 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\src\rtctime.c                                       #
#    Command line =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\src\rtctime.c -D USE_STDPERIPH_DRIVER -D            #
#                    STM32L1XX_MD -D SYSCLK_FREQ_HSI_32MHz -D ENABLE_USB -D   #
#                    ENABLE_USB_PRINTF -D CLIENT=1 -D DEBUG -D                #
#                    BLUENRG_CONFIG=BLUENRG_16_MHZ -lcN                       #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Client\List\ --diag_suppress Pa050 -o         #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Client\Obj\ --debug --endian=little           #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\inc\ -I "C:\Users\FredZhou\Documents\Origi #
#                    n\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth     #
#                    LE\SimpleBlueNRG_HCI\" -I "C:\Users\FredZhou\Documents\O #
#                    rigin\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth #
#                     LE\SimpleBlueNRG_HCI\includes\" -I                      #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\ -I               #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\ -I     #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\CMSIS\C #
#                    M3\DeviceSupport\ST\STM32L1xx\ -I                        #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32_U #
#                    SB-FS-Device_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32L1 #
#                    xx_StdPeriph_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\I2C\inc #
#                    \ -I C:\Users\FredZhou\Documents\Origin\Projects\Project #
#                    \BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LI #
#                    S3DH\inc\ -I C:\Users\FredZhou\Documents\Origin\Projects #
#                    \Project\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libr #
#                    aries\STLM75\inc\ -I C:\Users\FredZhou\Documents\Origin\ #
#                    Projects\Project\BLE_Chat\EWARM\..\..\..\platform\STM32L #
#                    1XX\Libraries\HTS221\inc\ -I                             #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LPS25H\ #
#                    inc\ -I C:\Users\FredZhou\Documents\Origin\Projects\Proj #
#                    ect\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries #
#                    \SDK_Eval_STM32L\inc\ -Ohs --use_c++_inline -I           #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Client\List\rtctime.lst                       #
#    Object file  =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Client\Obj\rtctime.o                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_Chat\src\rtctime.c
      1          #include "string.h"
      2          #include <stdio.h>
      3          #include "stm32l1xx.h"
      4          
      5          #ifndef DEBUG
      6          #define DEBUG 1
      7          #endif
      8          
      9          #if DEBUG
     10          #include <stdio.h>
     11          #define PRINTF(...) printf(__VA_ARGS__)
     12          #else
     13          #define PRINTF(...)
     14          #endif
     15          
     16          /* RTC Related ---------------------------------------------------------*/
     17          /* Private define ------------------------------------------------------------*/
     18          /* Uncomment the corresponding line to select the RTC Clock source */
     19          //#define RTC_CLOCK_SOURCE_LSE   /* LSE used as RTC source clock */
     20          #define RTC_CLOCK_SOURCE_LSI */ /* LSI used as RTC source clock. The RTC Clock
     21                                                may varies due to LSI frequency dispersion. */ 
     22          
     23          /* Private macro -------------------------------------------------------------*/
     24          /* Private variables ---------------------------------------------------------*/
     25          RTC_TimeTypeDef RTC_TimeStructure;
     26          RTC_DateTypeDef RTC_DateStructure;
     27          RTC_InitTypeDef RTC_InitStructure;
     28          
     29          __IO uint32_t AsynchPrediv = 0, SynchPrediv = 0;
     30          
     31          /**
     32            * @brief  Configure the RTC peripheral by selecting the clock source.
     33            * @param  None
     34            * @retval None
     35            */
     36          void RTC_Config(void)
     37          {
     38              /* Enable the PWR clock */
     39              RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
     40          
     41              /* Allow access to RTC */
     42              PWR_RTCAccessCmd(ENABLE);
     43                
     44            #if defined (RTC_CLOCK_SOURCE_LSI)  /* LSI used as RTC source clock*/
     45            /* The RTC Clock may varies due to LSI frequency dispersion. */   
     46              /* Enable the LSI OSC */ 
     47              printf("LSI OSC is selected!\n");
     48              RCC_LSICmd(ENABLE);
     49          
     50              /* Wait till LSI is ready */  
     51              while(RCC_GetFlagStatus(RCC_FLAG_LSIRDY) == RESET)
     52              {
     53              }
     54          
     55              /* Select the RTC Clock Source */
     56              RCC_RTCCLKConfig(RCC_RTCCLKSource_LSI);
     57              //change the prediv based on current clock
     58              //refer to AN3371 pg9
     59              SynchPrediv =  0x127;//0xFF;
     60              AsynchPrediv = 0x7C;//0x7F;
     61          
     62            #elif defined (RTC_CLOCK_SOURCE_LSE) /* LSE used as RTC source clock */
     63              /* Enable the LSE OSC */
     64              RCC_LSEConfig(RCC_LSE_ON);
     65          
     66              /* Wait till LSE is ready */  
     67              while(RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET)
     68              {
     69              }
     70          
     71              /* Select the RTC Clock Source */
     72              RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
     73              
     74              SynchPrediv =  0x127;//0xFF;
     75              AsynchPrediv = 0x7C;//0x7F;
     76          
     77            #else
     78              #error Please select the RTC Clock source inside the main.c file
     79            #endif /* RTC_CLOCK_SOURCE_LSI */
     80              
     81              /* Enable the RTC Clock */
     82              RCC_RTCCLKCmd(ENABLE);
     83          
     84              /* Wait for RTC APB registers synchronisation */
     85              RTC_WaitForSynchro();
     86          }
     87          
     88          /**
     89            * @brief  Display the current time on the Hyperterminal.
     90            * @param  None
     91            * @retval None
     92            */
     93          void RTC_TimeShow(void)
     94          {
     95              /* Get the current Time */
     96              RTC_GetTime(RTC_Format_BIN, &RTC_TimeStructure);
     97              printf("\n\r  The current time is :  %0.2d:%0.2d:%0.2d \n\r", RTC_TimeStructure.RTC_Hours, RTC_TimeStructure.RTC_Minutes, RTC_TimeStructure.RTC_Seconds);
     98              
     99              /* Get the current Date */
    100              RTC_GetDate(RTC_Format_BIN,&RTC_DateStructure);
    101              printf("\n\r  The current date is :  %0.2d:%0.2d:%0.2d \n\r", RTC_DateStructure.RTC_Year, RTC_DateStructure.RTC_Month, RTC_DateStructure.RTC_Date);
    102              
    103          
    104          }
    105          void RTC_SetMyDate(uint32_t yy, uint32_t mm, uint32_t dd)
    106          {
    107              RTC_DateStructure.RTC_Year =  yy;
    108              RTC_DateStructure.RTC_Month = mm;
    109              RTC_DateStructure.RTC_Date = dd;
    110              
    111              /* Configure the RTC time register */
    112              if(RTC_SetDate(RTC_Format_BIN, &RTC_DateStructure) == ERROR)
    113              {
    114                printf("\n\r>> !! RTC Set Date failed. !! <<\n\r");
    115              }
    116              else
    117              {
    118                printf("\n\r>> !! RTC Set Date success. !! <<\n\r");
    119                RTC_TimeShow();
    120               
    121              }
    122          }
    123          void RTC_SetMyTime(uint32_t hh, uint32_t mm, uint32_t ss)
    124          {
    125              uint32_t tmp_hh = hh, tmp_mm = mm, tmp_ss = ss;
    126              RTC_TimeStructure.RTC_Hours = tmp_hh;
    127              RTC_TimeStructure.RTC_Minutes = tmp_mm;
    128              RTC_TimeStructure.RTC_Seconds = tmp_ss;
    129              
    130              /* Configure the RTC time register */
    131              if(RTC_SetTime(RTC_Format_BIN, &RTC_TimeStructure) == ERROR)
    132              {
    133                printf("\n\r>> !! RTC Set Time failed. !! <<\n\r");
    134              } 
    135              else
    136              {
    137                printf("\n\r>> !! RTC Set Time success. !! <<\n\r");
    138                RTC_TimeShow();
    139              }
    140          }
    141          void RTC_DateRegulate()
    142          {
    143            uint32_t tmp_yy = 0xFF, tmp_mm = 0xFF, tmp_dd = 0xFF;
    144            RTC_DateStructure.RTC_Year =  tmp_yy;
    145            RTC_DateStructure.RTC_Month = tmp_mm;
    146            RTC_DateStructure.RTC_Date = tmp_dd;
    147            /* Configure the RTC date register */
    148            if(RTC_SetDate(RTC_Format_BIN, &RTC_DateStructure) == ERROR)
    149            {
    150              printf("\n\r>> !! RTC Set Date failed. !! <<\n\r");
    151            }
    152            else
    153            {
    154              printf("\n\r>> !! RTC Set Date success. !! <<\n\r");
    155              RTC_TimeShow();
    156              /* Indicator for the RTC configuration */
    157              RTC_WriteBackupRegister(RTC_BKP_DR0, 0x32F2);
    158            }
    159          }
    160          /**
    161            * @brief  Returns the time entered by user, using Hyperterminal.
    162            * @param  None
    163            * @retval None
    164            */
    165          void RTC_TimeRegulate(void)
    166          {
    167              uint32_t tmp_hh = 0xFF, tmp_mm = 0xFF, tmp_ss = 0xFF;
    168              RTC_TimeStructure.RTC_Hours = tmp_hh;
    169              RTC_TimeStructure.RTC_Minutes = tmp_mm;
    170              RTC_TimeStructure.RTC_Seconds = tmp_ss;
    171              
    172              /* Configure the RTC time register */
    173              if(RTC_SetTime(RTC_Format_BIN, &RTC_TimeStructure) == ERROR)
    174              {
    175                printf("\n\r>> !! RTC Set Time failed. !! <<\n\r");
    176              } 
    177              else
    178              {
    179                printf("\n\r>> !! RTC Set Time success. !! <<\n\r");
    180                RTC_DateRegulate();
    181                RTC_TimeShow();
    182                /* Indicator for the RTC configuration */
    183                RTC_WriteBackupRegister(RTC_BKP_DR0, 0x32F2);
    184              }
    185          
    186              
    187          }
    188          
    189          
    190          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   RTC_Config
         8   -> PWR_RTCAccessCmd
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_GetFlagStatus
         8   -> RCC_LSICmd
         8   -> RCC_RTCCLKCmd
         8   -> RCC_RTCCLKConfig
         0   -> RTC_WaitForSynchro
         8   -> printf
       8   RTC_DateRegulate
         8   -> RTC_SetDate
         8   -> RTC_TimeShow
         0   -> RTC_WriteBackupRegister
         0   -> printf
         8   -> printf
       8   RTC_SetMyDate
         8   -> RTC_SetDate
         0   -> RTC_TimeShow
         0   -> printf
         8   -> printf
       8   RTC_SetMyTime
         8   -> RTC_SetTime
         0   -> RTC_TimeShow
         0   -> printf
         8   -> printf
      16   RTC_TimeRegulate
        16   -> RTC_SetDate
        16   -> RTC_SetTime
        16   -> RTC_TimeShow
         0   -> RTC_WriteBackupRegister
        16   -> RTC_WriteBackupRegister
         0   -> printf
        16   -> printf
       8   RTC_TimeShow
         8   -> RTC_GetDate
         8   -> RTC_GetTime
         0   -> printf
         8   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant "LSI OSC is selected!\n">
      48  ?<Constant "\n\r  The current date ...">
      48  ?<Constant "\n\r  The current time ...">
      40  ?<Constant "\n\r>> !! RTC Set Date ...">
      40  ?<Constant "\n\r>> !! RTC Set Date ...">_1
      40  ?<Constant "\n\r>> !! RTC Set Time ...">
      40  ?<Constant "\n\r>> !! RTC Set Time ...">_1
       4  ??DataTable12
       4  ??DataTable12_1
       8  AsynchPrediv
          SynchPrediv
      80  RTC_Config
      64  RTC_DateRegulate
       8  RTC_DateStructure
          RTC_TimeStructure
      12  RTC_InitStructure
      52  RTC_SetMyDate
      52  RTC_SetMyTime
     114  RTC_TimeRegulate
      52  RTC_TimeShow

 
  28 bytes in section .bss
 702 bytes in section .text
 
 702 bytes of CODE memory
  28 bytes of DATA memory

Errors: none
Warnings: none
