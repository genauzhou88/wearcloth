###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      09/Oct/2014  10:33:29 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\FredZhou\Documents\Origin\Projects\Bluetooth    #
#                    LE\SimpleBlueNRG_HCI\utils\list.c                        #
#    Command line =  "C:\Users\FredZhou\Documents\Origin\Projects\Bluetooth   #
#                    LE\SimpleBlueNRG_HCI\utils\list.c" -D                    #
#                    USE_STDPERIPH_DRIVER -D STM32L1XX_MD -D                  #
#                    SYSCLK_FREQ_HSI_32MHz -D ENABLE_USB -D                   #
#                    ENABLE_USB_PRINTF -D CLIENT=1 -D DEBUG -D                #
#                    BLUENRG_CONFIG=BLUENRG_16_MHZ -lcN                       #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Client\List\ --diag_suppress Pa050 -o         #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Client\Obj\ --debug --endian=little           #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\inc\ -I "C:\Users\FredZhou\Documents\Origi #
#                    n\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth     #
#                    LE\SimpleBlueNRG_HCI\" -I "C:\Users\FredZhou\Documents\O #
#                    rigin\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth #
#                     LE\SimpleBlueNRG_HCI\includes\" -I                      #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\ -I               #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\ -I     #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\CMSIS\C #
#                    M3\DeviceSupport\ST\STM32L1xx\ -I                        #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32_U #
#                    SB-FS-Device_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32L1 #
#                    xx_StdPeriph_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\I2C\inc #
#                    \ -I C:\Users\FredZhou\Documents\Origin\Projects\Project #
#                    \BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LI #
#                    S3DH\inc\ -I C:\Users\FredZhou\Documents\Origin\Projects #
#                    \Project\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libr #
#                    aries\STLM75\inc\ -I C:\Users\FredZhou\Documents\Origin\ #
#                    Projects\Project\BLE_Chat\EWARM\..\..\..\platform\STM32L #
#                    1XX\Libraries\HTS221\inc\ -I                             #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LPS25H\ #
#                    inc\ -I C:\Users\FredZhou\Documents\Origin\Projects\Proj #
#                    ect\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries #
#                    \SDK_Eval_STM32L\inc\ -Ohs --use_c++_inline -I           #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Client\List\list.lst                          #
#    Object file  =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Client\Obj\list.o                             #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\FredZhou\Documents\Origin\Projects\Bluetooth LE\SimpleBlueNRG_HCI\utils\list.c
      1          /******************** (C) COPYRIGHT 2012 STMicroelectronics ********************
      2          * File Name          : list.c
      3          * Author             : AMS - HEA&RF BU
      4          * Version            : V1.0.0
      5          * Date               : 19-July-2012
      6          * Description        : Circular Linked List Implementation.
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          *******************************************************************************/
     15          
     16          /******************************************************************************
     17           * Include Files
     18          ******************************************************************************/
     19          #include <hal_types.h>
     20          #include "list.h"
     21          
     22          /******************************************************************************
     23           * Function Definitions 
     24          ******************************************************************************/
     25          void list_init_head (tListNode * listHead)
     26          {
     27          	listHead->next = listHead;
     28          	listHead->prev = listHead;	
     29          }
     30          
     31          tHalBool list_is_empty (tListNode * listHead)
     32          {
     33          	return ((listHead->next == listHead)? TRUE:FALSE);
     34          }
     35          
     36          void list_insert_head (tListNode * listHead, tListNode * node)
     37          {
     38          	node->next = listHead->next;
     39          	node->prev = listHead;
     40          	listHead->next = node;
     41          	(node->next)->prev = node;
     42          }
     43          
     44          
     45          void list_insert_tail (tListNode * listHead, tListNode * node)
     46          {
     47          	node->next = listHead;
     48          	node->prev = listHead->prev;
     49          	listHead->prev = node;
     50          	(node->prev)->next = node;
     51          }
     52          
     53          
     54          void list_remove_node (tListNode * node)
     55          {
     56          	(node->prev)->next = node->next;
     57          	(node->next)->prev = node->prev;
     58          }
     59          
     60          
     61          void list_remove_head (tListNode * listHead, tListNode ** node )
     62          {
     63          	*node = listHead->next;
     64          	list_remove_node (listHead->next);
     65          	(*node)->next = NULL;
     66          	(*node)->prev = NULL;
     67          }
     68          
     69          
     70          void list_remove_tail (tListNode * listHead, tListNode ** node )
     71          {
     72          	*node = listHead->prev;
     73          	list_remove_node (listHead->prev);
     74          	(*node)->next = NULL;
     75          	(*node)->prev = NULL;
     76          }
     77          
     78          
     79          void list_insert_node_after (tListNode * node, tListNode * ref_node)
     80          {
     81          	node->next = ref_node->next;
     82          	node->prev = ref_node;
     83          	ref_node->next = node;
     84          	(node->next)->prev = node;
     85          }
     86          
     87          
     88          void list_insert_node_before (tListNode * node, tListNode * ref_node)
     89          {
     90          	node->next = ref_node;
     91          	node->prev = ref_node->prev;
     92          	ref_node->prev = node;
     93          	(node->prev)->next = node;
     94          }
     95          
     96          
     97          int list_get_size (tListNode * listHead)
     98          {
     99          	int size = 0;
    100          	tListNode * temp = listHead->next;
    101          	while (temp != listHead)
    102          	{
    103          		size++;
    104          		temp = temp->next;		
    105          	}
    106          	return (size);
    107          }
    108          
    109          void list_get_next_node (tListNode * ref_node, tListNode ** node)
    110          {
    111              *node = ref_node->next;
    112          }
    113          
    114          
    115          void list_get_prev_node (tListNode * ref_node, tListNode ** node)
    116          {
    117              *node = ref_node->prev;
    118          }
    119          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   list_get_next_node
       0   list_get_prev_node
       0   list_get_size
       0   list_init_head
       0   list_insert_head
       0   list_insert_node_after
       0   list_insert_node_before
       0   list_insert_tail
       0   list_is_empty
       0   list_remove_head
       0   list_remove_node
       0   list_remove_tail


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       6  list_get_next_node
       6  list_get_prev_node
      44  list_get_size
       6  list_init_head
      14  list_insert_head
      14  list_insert_node_after
      14  list_insert_node_before
      14  list_insert_tail
      14  list_is_empty
      30  list_remove_head
      14  list_remove_node
      30  list_remove_tail

 
 206 bytes in section .text
 
 206 bytes of CODE memory

Errors: none
Warnings: none
