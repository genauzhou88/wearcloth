###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      31/Oct/2014  21:00:55 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\src\usb_pwr.c                                       #
#    Command line =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\src\usb_pwr.c -D USE_STDPERIPH_DRIVER -D            #
#                    STM32L1XX_MD -D SYSCLK_FREQ_HSI_32MHz -D ENABLE_USB -D   #
#                    ENABLE_USB_PRINTF -D DEBUG -D SERVER -D ACCEL_TEST -lcN  #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\List\ --diag_suppress Pa050 -o         #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\Obj\ --debug --endian=little           #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\inc\ -I "C:\Users\FredZhou\Documents\Origi #
#                    n\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth     #
#                    LE\SimpleBlueNRG_HCI\" -I "C:\Users\FredZhou\Documents\O #
#                    rigin\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth #
#                     LE\SimpleBlueNRG_HCI\includes\" -I                      #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\ -I               #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\ -I     #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\CMSIS\C #
#                    M3\DeviceSupport\ST\STM32L1xx\ -I                        #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32_U #
#                    SB-FS-Device_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32L1 #
#                    xx_StdPeriph_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\I2C\inc #
#                    \ -I C:\Users\FredZhou\Documents\Origin\Projects\Project #
#                    \BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LI #
#                    S3DH\inc\ -I C:\Users\FredZhou\Documents\Origin\Projects #
#                    \Project\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libr #
#                    aries\STLM75\inc\ -I C:\Users\FredZhou\Documents\Origin\ #
#                    Projects\Project\BLE_Chat\EWARM\..\..\..\platform\STM32L #
#                    1XX\Libraries\HTS221\inc\ -I                             #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LPS25H\ #
#                    inc\ -I C:\Users\FredZhou\Documents\Origin\Projects\Proj #
#                    ect\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries #
#                    \SDK_Eval_STM32L\inc\ -Ohs --use_c++_inline -I           #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\List\usb_pwr.lst                       #
#    Object file  =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\Obj\usb_pwr.o                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_Chat\src\usb_pwr.c
      1          /******************** (C) COPYRIGHT 2011 STMicroelectronics ********************
      2          * File Name          : usb_pwr.c
      3          * Author             : MCD Application Team
      4          * Version            : V3.3.0
      5          * Date               : 21-March-2011
      6          * Description        : Connection/disconnection & power management
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          *******************************************************************************/
     15          
     16          /* Includes ------------------------------------------------------------------*/
     17          #include "stm32l1xx.h" 
     18          #include "usb_lib.h"
     19          #include "usb_conf.h"
     20          #include "usb_pwr.h"
     21          #include "hw_config.h"
     22          
     23          /* Private typedef -----------------------------------------------------------*/
     24          /* Private define ------------------------------------------------------------*/
     25          /* Private macro -------------------------------------------------------------*/
     26          /* Private variables ---------------------------------------------------------*/
     27          __IO uint32_t bDeviceState = UNCONNECTED; /* USB device status */
     28          __IO bool fSuspendEnabled = TRUE;  /* true when suspend is possible */
     29          
     30          struct
     31          {
     32            __IO RESUME_STATE eState;
     33            __IO uint8_t bESOFcnt;
     34          }ResumeS;
     35          
     36          /* Extern variables ----------------------------------------------------------*/
     37          /* Private function prototypes -----------------------------------------------*/
     38          /* Extern function prototypes ------------------------------------------------*/
     39          /* Private functions ---------------------------------------------------------*/
     40          
     41          /*******************************************************************************
     42          * Function Name  : PowerOn
     43          * Description    :
     44          * Input          : None.
     45          * Output         : None.
     46          * Return         : USB_SUCCESS.
     47          *******************************************************************************/
     48          RESULT PowerOn(void)
     49          {
     50          #ifndef STM32F10X_CL
     51            uint16_t wRegVal;
     52          
     53            /*** cable plugged-in ? ***/
     54            USB_Cable_Config(ENABLE);
     55          
     56            /*** CNTR_PWDN = 0 ***/
     57            wRegVal = CNTR_FRES;
     58            _SetCNTR(wRegVal);
     59          
     60            /*** CNTR_FRES = 0 ***/
     61            wInterrupt_Mask = 0;
     62            _SetCNTR(wInterrupt_Mask);
     63            /*** Clear pending interrupts ***/
     64            _SetISTR(0);
     65            /*** Set interrupt mask ***/
     66            wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
     67            _SetCNTR(wInterrupt_Mask);
     68          #endif /* STM32F10X_CL */
     69          
     70            return USB_SUCCESS;
     71          }
     72          
     73          /*******************************************************************************
     74          * Function Name  : PowerOff
     75          * Description    : handles switch-off conditions
     76          * Input          : None.
     77          * Output         : None.
     78          * Return         : USB_SUCCESS.
     79          *******************************************************************************/
     80          RESULT PowerOff()
     81          {
     82          #ifndef STM32F10X_CL
     83            /* disable all interrupts and force USB reset */
     84            _SetCNTR(CNTR_FRES);
     85            /* clear interrupt status register */
     86            _SetISTR(0);
     87            /* Disable the Pull-Up*/
     88            USB_Cable_Config(DISABLE);
     89            /* switch-off device */
     90            _SetCNTR(CNTR_FRES + CNTR_PDWN);
     91          #endif /* STM32F10X_CL */
     92          
     93            /* sw variables reset */
     94            /* ... */
     95          
     96            return USB_SUCCESS;
     97          }
     98          
     99          /*******************************************************************************
    100          * Function Name  : Suspend
    101          * Description    : sets suspend mode operating conditions
    102          * Input          : None.
    103          * Output         : None.
    104          * Return         : USB_SUCCESS.
    105          *******************************************************************************/
    106          void Suspend(void)
    107          {
    108          #ifndef STM32F10X_CL
    109            uint16_t wCNTR;
    110            /* suspend preparation */
    111            /* ... */
    112          
    113            /* macrocell enters suspend mode */
    114            wCNTR = _GetCNTR();
    115            wCNTR |= CNTR_FSUSP;
    116            _SetCNTR(wCNTR);
    117          #endif /* STM32F10X_CL */
    118          
    119            /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
    120            /* power reduction */
    121            /* ... on connected devices */
    122          
    123          #ifndef STM32F10X_CL
    124            /* force low-power mode in the macrocell */
    125            wCNTR = _GetCNTR();
    126            wCNTR |= CNTR_LPMODE;
    127            _SetCNTR(wCNTR);
    128          #endif /* STM32F10X_CL */
    129          
    130            /* switch-off the clocks */
    131            /* ... */
    132            Enter_LowPowerMode();
    133          
    134          }
    135          
    136          /*******************************************************************************
    137          * Function Name  : Resume_Init
    138          * Description    : Handles wake-up restoring normal operations
    139          * Input          : None.
    140          * Output         : None.
    141          * Return         : USB_SUCCESS.
    142          *******************************************************************************/
    143          void Resume_Init(void)
    144          {
    145          #ifndef STM32F10X_CL
    146            uint16_t wCNTR;
    147          #endif /* STM32F10X_CL */ 
    148          
    149            /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
    150            /* restart the clocks */
    151            /* ...  */
    152          
    153          #ifndef STM32F10X_CL
    154            /* CNTR_LPMODE = 0 */
    155            wCNTR = _GetCNTR();
    156            wCNTR &= (~CNTR_LPMODE);
    157            _SetCNTR(wCNTR);
    158          #endif /* STM32F10X_CL */ 
    159          
    160            /* restore full power */
    161            /* ... on connected devices */
    162            Leave_LowPowerMode();
    163          
    164          #ifndef STM32F10X_CL
    165            /* reset FSUSP bit */
    166            _SetCNTR(IMR_MSK);
    167          #endif /* STM32F10X_CL */
    168          
    169            /* reverse suspend preparation */
    170            /* ... */
    171          
    172          }
    173          
    174          /*******************************************************************************
    175          * Function Name  : Resume
    176          * Description    : This is the state machine handling resume operations and
    177          *                 timing sequence. The control is based on the Resume structure
    178          *                 variables and on the ESOF interrupt calling this subroutine
    179          *                 without changing machine state.
    180          * Input          : a state machine value (RESUME_STATE)
    181          *                  RESUME_ESOF doesn't change ResumeS.eState allowing
    182          *                  decrementing of the ESOF counter in different states.
    183          * Output         : None.
    184          * Return         : None.
    185          *******************************************************************************/
    186          void Resume(RESUME_STATE eResumeSetVal)
    187          {
    188          #ifndef STM32F10X_CL
    189            uint16_t wCNTR;
    190          #endif /* STM32F10X_CL */
    191          
    192            if (eResumeSetVal != RESUME_ESOF)
    193              ResumeS.eState = eResumeSetVal;
    194          
    195            switch (ResumeS.eState)
    196            {
    197              case RESUME_EXTERNAL:
    198                Resume_Init();
    199                ResumeS.eState = RESUME_OFF;
    200                break;
    201              case RESUME_INTERNAL:
    202                Resume_Init();
    203                ResumeS.eState = RESUME_START;
    204                break;
    205              case RESUME_LATER:
    206                ResumeS.bESOFcnt = 2;
    207                ResumeS.eState = RESUME_WAIT;
    208                break;
    209              case RESUME_WAIT:
    210                ResumeS.bESOFcnt--;
    211                if (ResumeS.bESOFcnt == 0)
    212                  ResumeS.eState = RESUME_START;
    213                break;
    214              case RESUME_START:
    215               #ifdef STM32F10X_CL
    216                OTGD_FS_SetRemoteWakeup();
    217               #else 
    218                wCNTR = _GetCNTR();
    219                wCNTR |= CNTR_RESUME;
    220                _SetCNTR(wCNTR);
    221               #endif /* STM32F10X_CL */
    222                ResumeS.eState = RESUME_ON;
    223                ResumeS.bESOFcnt = 10;
    224                break;
    225              case RESUME_ON:
    226              #ifndef STM32F10X_CL      
    227                ResumeS.bESOFcnt--;
    228                if (ResumeS.bESOFcnt == 0)
    229                {
    230               #endif /* STM32F10X_CL */    
    231                 #ifdef STM32F10X_CL
    232                  OTGD_FS_ResetRemoteWakeup();
    233                 #else
    234                  wCNTR = _GetCNTR();
    235                  wCNTR &= (~CNTR_RESUME);
    236                  _SetCNTR(wCNTR);
    237                 #endif /* STM32F10X_CL */
    238                  ResumeS.eState = RESUME_OFF;
    239               #ifndef STM32F10X_CL
    240                }
    241               #endif /* STM32F10X_CL */
    242                break;
    243              case RESUME_OFF:
    244              case RESUME_ESOF:
    245              default:
    246                ResumeS.eState = RESUME_OFF;
    247                break;
    248            }
    249          }
    250          
    251          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   PowerOff
         8   -> USB_Cable_Config
       8   PowerOn
         8   -> USB_Cable_Config
      16   Resume
        16   -> Leave_LowPowerMode
       8   Resume_Init
         8   -> Leave_LowPowerMode
       0   Suspend
         0   -> Enter_LowPowerMode


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
      24  PowerOff
      38  PowerOn
     154  Resume
       4  ResumeS
      26  Resume_Init
      26  Suspend
       4  bDeviceState
       1  fSuspendEnabled

 
   8 bytes in section .bss
   1 byte  in section .data
 280 bytes in section .text
 
 280 bytes of CODE memory
   9 bytes of DATA memory

Errors: none
Warnings: none
