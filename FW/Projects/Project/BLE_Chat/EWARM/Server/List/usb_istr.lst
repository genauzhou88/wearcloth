###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      31/Oct/2014  21:00:53 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\src\usb_istr.c                                      #
#    Command line =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\src\usb_istr.c -D USE_STDPERIPH_DRIVER -D           #
#                    STM32L1XX_MD -D SYSCLK_FREQ_HSI_32MHz -D ENABLE_USB -D   #
#                    ENABLE_USB_PRINTF -D DEBUG -D SERVER -D ACCEL_TEST -lcN  #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\List\ --diag_suppress Pa050 -o         #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\Obj\ --debug --endian=little           #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\inc\ -I "C:\Users\FredZhou\Documents\Origi #
#                    n\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth     #
#                    LE\SimpleBlueNRG_HCI\" -I "C:\Users\FredZhou\Documents\O #
#                    rigin\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth #
#                     LE\SimpleBlueNRG_HCI\includes\" -I                      #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\ -I               #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\ -I     #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\CMSIS\C #
#                    M3\DeviceSupport\ST\STM32L1xx\ -I                        #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32_U #
#                    SB-FS-Device_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32L1 #
#                    xx_StdPeriph_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\I2C\inc #
#                    \ -I C:\Users\FredZhou\Documents\Origin\Projects\Project #
#                    \BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LI #
#                    S3DH\inc\ -I C:\Users\FredZhou\Documents\Origin\Projects #
#                    \Project\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libr #
#                    aries\STLM75\inc\ -I C:\Users\FredZhou\Documents\Origin\ #
#                    Projects\Project\BLE_Chat\EWARM\..\..\..\platform\STM32L #
#                    1XX\Libraries\HTS221\inc\ -I                             #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LPS25H\ #
#                    inc\ -I C:\Users\FredZhou\Documents\Origin\Projects\Proj #
#                    ect\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries #
#                    \SDK_Eval_STM32L\inc\ -Ohs --use_c++_inline -I           #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\List\usb_istr.lst                      #
#    Object file  =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\Obj\usb_istr.o                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_Chat\src\usb_istr.c
      1          /******************** (C) COPYRIGHT 2011 STMicroelectronics ********************
      2          * File Name          : usb_istr.c
      3          * Author             : MCD Application Team
      4          * Version            : V3.3.0
      5          * Date               : 21-March-2011
      6          * Description        : ISTR events interrupt service routines
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          *******************************************************************************/
     15          
     16          /* Includes ------------------------------------------------------------------*/
     17          #include "usb_lib.h"
     18          #include "usb_prop.h"
     19          #include "usb_pwr.h"
     20          #include "usb_istr.h"
     21          
     22          /* Private typedef -----------------------------------------------------------*/
     23          /* Private define ------------------------------------------------------------*/
     24          /* Private macro -------------------------------------------------------------*/
     25          /* Private variables ---------------------------------------------------------*/
     26          __IO uint16_t wIstr;  /* ISTR register last read value */
     27          __IO uint8_t bIntPackSOF = 0;  /* SOFs received between 2 consecutive packets */
     28          
     29          /* Extern variables ----------------------------------------------------------*/
     30          /* Private function prototypes -----------------------------------------------*/
     31          /* Private functions ---------------------------------------------------------*/
     32          /* function pointers to non-control endpoints service routines */
     33          void (*pEpInt_IN[7])(void) =
     34            {
     35              EP1_IN_Callback,
     36              EP2_IN_Callback,
     37              EP3_IN_Callback,
     38              EP4_IN_Callback,
     39              EP5_IN_Callback,
     40              EP6_IN_Callback,
     41              EP7_IN_Callback,
     42            };
     43          
     44          void (*pEpInt_OUT[7])(void) =
     45            {
     46              EP1_OUT_Callback,
     47              EP2_OUT_Callback,
     48              EP3_OUT_Callback,
     49              EP4_OUT_Callback,
     50              EP5_OUT_Callback,
     51              EP6_OUT_Callback,
     52              EP7_OUT_Callback,
     53            };
     54          
     55          #ifndef STM32F10X_CL
     56          
     57          /*******************************************************************************
     58          * Function Name  : USB_Istr
     59          * Description    : STR events interrupt service routine
     60          * Input          :
     61          * Output         :
     62          * Return         :
     63          *******************************************************************************/
     64          void USB_Istr(void)
     65          {
     66          
     67            wIstr = _GetISTR();
     68          
     69          #if (IMR_MSK & ISTR_SOF)
     70            if (wIstr & ISTR_SOF & wInterrupt_Mask)
     71            {
     72              _SetISTR((uint16_t)CLR_SOF);
     73              bIntPackSOF++;
     74          
     75          #ifdef SOF_CALLBACK
     76              SOF_Callback();
     77          #endif
     78            }
     79          #endif
     80            /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
     81            
     82          #if (IMR_MSK & ISTR_CTR)
     83            if (wIstr & ISTR_CTR & wInterrupt_Mask)
     84            {
     85              /* servicing of the endpoint correct transfer interrupt */
     86              /* clear of the CTR flag into the sub */
     87              CTR_LP();
     88          #ifdef CTR_CALLBACK
     89              CTR_Callback();
     90          #endif
     91            }
     92          #endif
     93            /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
     94          #if (IMR_MSK & ISTR_RESET)
     95            if (wIstr & ISTR_RESET & wInterrupt_Mask)
     96            {
     97              _SetISTR((uint16_t)CLR_RESET);
     98              Device_Property.Reset();
     99          #ifdef RESET_CALLBACK
    100              RESET_Callback();
    101          #endif
    102            }
    103          #endif
    104            /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    105          #if (IMR_MSK & ISTR_DOVR)
    106            if (wIstr & ISTR_DOVR & wInterrupt_Mask)
    107            {
    108              _SetISTR((uint16_t)CLR_DOVR);
    109          #ifdef DOVR_CALLBACK
    110              DOVR_Callback();
    111          #endif
    112            }
    113          #endif
    114            /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    115          #if (IMR_MSK & ISTR_ERR)
    116            if (wIstr & ISTR_ERR & wInterrupt_Mask)
    117            {
    118              _SetISTR((uint16_t)CLR_ERR);
    119          #ifdef ERR_CALLBACK
    120              ERR_Callback();
    121          #endif
    122            }
    123          #endif
    124            /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    125          #if (IMR_MSK & ISTR_WKUP)
    126            if (wIstr & ISTR_WKUP & wInterrupt_Mask)
    127            {
    128              _SetISTR((uint16_t)CLR_WKUP);
    129              Resume(RESUME_EXTERNAL);
    130          #ifdef WKUP_CALLBACK
    131              WKUP_Callback();
    132          #endif
    133            }
    134          #endif
    135            /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    136          #if (IMR_MSK & ISTR_SUSP)
    137            if (wIstr & ISTR_SUSP & wInterrupt_Mask)
    138            {
    139          
    140              /* check if SUSPEND is possible */
    141              if (fSuspendEnabled)
    142              {
    143                Suspend();
    144              }
    145              else
    146              {
    147                /* if not possible then resume after xx ms */
    148                Resume(RESUME_LATER);
    149              }
    150              /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    151              _SetISTR((uint16_t)CLR_SUSP);
    152          #ifdef SUSP_CALLBACK
    153              SUSP_Callback();
    154          #endif
    155            }
    156          #endif
    157            /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    158          
    159          #if (IMR_MSK & ISTR_ESOF)
    160            if (wIstr & ISTR_ESOF & wInterrupt_Mask)
    161            {
    162              _SetISTR((uint16_t)CLR_ESOF);
    163              /* resume handling timing is made with ESOFs */
    164              Resume(RESUME_ESOF); /* request without change of the machine state */
    165          
    166          #ifdef ESOF_CALLBACK
    167              ESOF_Callback();
    168          #endif
    169            }
    170          #endif
    171          } /* USB_Istr */
    172          
    173          /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    174          #else /* STM32F10X_CL */
    175          
    176          
    177          /*******************************************************************************
    178          * Function Name  : STM32_PCD_OTG_ISR_Handler
    179          * Description    : Handles all USB Device Interrupts
    180          * Input          : None
    181          * Output         : None
    182          * Return         : status
    183          *******************************************************************************/
    184          u32 STM32_PCD_OTG_ISR_Handler (void)
    185          {
    186            USB_OTG_GINTSTS_TypeDef gintr_status;
    187            u32 retval = 0;
    188          
    189            if (USBD_FS_IsDeviceMode()) /* ensure that we are in device mode */
    190            {
    191              gintr_status.d32 = OTGD_FS_ReadCoreItr();
    192          
    193             /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    194              
    195              /* If there is no interrupt pending exit the interrupt routine */
    196              if (!gintr_status.d32)
    197              {
    198                return 0;
    199              }
    200          
    201             /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/    
    202              /* Early Suspend interrupt */ 
    203          #ifdef INTR_ERLYSUSPEND
    204              if (gintr_status.b.erlysuspend)
    205              {
    206                retval |= OTGD_FS_Handle_EarlySuspend_ISR();
    207              }
    208          #endif /* INTR_ERLYSUSPEND */
    209              
    210             /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    211              /* End of Periodic Frame interrupt */
    212          #ifdef INTR_EOPFRAME    
    213              if (gintr_status.b.eopframe)
    214              {
    215                retval |= OTGD_FS_Handle_EOPF_ISR();
    216              }
    217          #endif /* INTR_EOPFRAME */
    218              
    219             /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    220              /* Non Periodic Tx FIFO Empty interrupt */
    221          #ifdef INTR_NPTXFEMPTY    
    222              if (gintr_status.b.nptxfempty)
    223              {
    224                retval |= OTGD_FS_Handle_NPTxFE_ISR();
    225              }
    226          #endif /* INTR_NPTXFEMPTY */
    227              
    228             /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/    
    229              /* Wakeup or RemoteWakeup interrupt */
    230          #ifdef INTR_WKUPINTR    
    231              if (gintr_status.b.wkupintr)
    232              {   
    233                retval |= OTGD_FS_Handle_Wakeup_ISR();
    234              }
    235          #endif /* INTR_WKUPINTR */   
    236              
    237             /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    238              /* Suspend interrupt */
    239          #ifdef INTR_USBSUSPEND
    240              if (gintr_status.b.usbsuspend)
    241              { 
    242                /* check if SUSPEND is possible */
    243                if (fSuspendEnabled)
    244                {
    245                  Suspend();
    246                }
    247                else
    248                {
    249                  /* if not possible then resume after xx ms */
    250                  Resume(RESUME_LATER); /* This case shouldn't happen in OTG Device mode because 
    251                  there's no ESOF interrupt to increment the ResumeS.bESOFcnt in the Resume state machine */
    252                }
    253                      
    254                retval |= OTGD_FS_Handle_USBSuspend_ISR();
    255              }
    256          #endif /* INTR_USBSUSPEND */
    257          
    258             /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    259              /* Start of Frame interrupt */
    260          #ifdef INTR_SOFINTR    
    261              if (gintr_status.b.sofintr)
    262              {
    263                /* Update the frame number variable */
    264                bIntPackSOF++;
    265                
    266                retval |= OTGD_FS_Handle_Sof_ISR();
    267              }
    268          #endif /* INTR_SOFINTR */
    269              
    270             /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    271              /* Receive FIFO Queue Status Level interrupt */
    272          #ifdef INTR_RXSTSQLVL
    273              if (gintr_status.b.rxstsqlvl)
    274              {
    275                retval |= OTGD_FS_Handle_RxStatusQueueLevel_ISR();
    276              }
    277          #endif /* INTR_RXSTSQLVL */
    278              
    279             /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    280              /* Enumeration Done interrupt */
    281          #ifdef INTR_ENUMDONE
    282              if (gintr_status.b.enumdone)
    283              {
    284                retval |= OTGD_FS_Handle_EnumDone_ISR();
    285              }
    286          #endif /* INTR_ENUMDONE */
    287              
    288             /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    289              /* Reset interrupt */
    290          #ifdef INTR_USBRESET
    291              if (gintr_status.b.usbreset)
    292              {
    293                retval |= OTGD_FS_Handle_UsbReset_ISR();
    294              }    
    295          #endif /* INTR_USBRESET */
    296              
    297             /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    298              /* IN Endpoint interrupt */
    299          #ifdef INTR_INEPINTR
    300              if (gintr_status.b.inepint)
    301              {
    302                retval |= OTGD_FS_Handle_InEP_ISR();
    303              }
    304          #endif /* INTR_INEPINTR */
    305              
    306             /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/    
    307              /* OUT Endpoint interrupt */
    308          #ifdef INTR_OUTEPINTR
    309              if (gintr_status.b.outepintr)
    310              {
    311                retval |= OTGD_FS_Handle_OutEP_ISR();
    312              }
    313          #endif /* INTR_OUTEPINTR */    
    314           
    315             /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/    
    316              /* Mode Mismatch interrupt */
    317          #ifdef INTR_MODEMISMATCH
    318              if (gintr_status.b.modemismatch)
    319              {
    320                retval |= OTGD_FS_Handle_ModeMismatch_ISR();
    321              }
    322          #endif /* INTR_MODEMISMATCH */  
    323          
    324             /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/    
    325              /* Global IN Endpoints NAK Effective interrupt */
    326          #ifdef INTR_GINNAKEFF
    327              if (gintr_status.b.ginnakeff)
    328              {
    329                retval |= OTGD_FS_Handle_GInNakEff_ISR();
    330              }
    331          #endif /* INTR_GINNAKEFF */  
    332          
    333             /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/    
    334              /* Global OUT Endpoints NAK effective interrupt */
    335          #ifdef INTR_GOUTNAKEFF
    336              if (gintr_status.b.goutnakeff)
    337              {
    338                retval |= OTGD_FS_Handle_GOutNakEff_ISR();
    339              }
    340          #endif /* INTR_GOUTNAKEFF */  
    341          
    342             /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/    
    343              /* Isochronous Out packet Dropped interrupt */
    344          #ifdef INTR_ISOOUTDROP
    345              if (gintr_status.b.isooutdrop)
    346              {
    347                retval |= OTGD_FS_Handle_IsoOutDrop_ISR();
    348              }
    349          #endif /* INTR_ISOOUTDROP */  
    350          
    351             /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/    
    352              /* Endpoint Mismatch error interrupt */
    353          #ifdef INTR_EPMISMATCH
    354              if (gintr_status.b.epmismatch)
    355              {
    356                retval |= OTGD_FS_Handle_EPMismatch_ISR();
    357              }
    358          #endif /* INTR_EPMISMATCH */  
    359          
    360             /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/    
    361              /* Incomplete Isochronous IN transfer error interrupt */
    362          #ifdef INTR_INCOMPLISOIN
    363              if (gintr_status.b.incomplisoin)
    364              {
    365                retval |= OTGD_FS_Handle_IncomplIsoIn_ISR();
    366              }
    367          #endif /* INTR_INCOMPLISOIN */  
    368          
    369             /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/    
    370              /* Incomplete Isochronous OUT transfer error interrupt */
    371          #ifdef INTR_INCOMPLISOOUT
    372              if (gintr_status.b.outepintr)
    373              {
    374                retval |= OTGD_FS_Handle_IncomplIsoOut_ISR();
    375              }
    376          #endif /* INTR_INCOMPLISOOUT */  
    377            
    378            }
    379            return retval;
    380          }
    381          
    382          #endif /* STM32F10X_CL */
    383          
    384          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   USB_Istr
         0   -- Indirect call
        16   -> CTR_LP
        16   -> SOF_Callback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      96  USB_Istr
       4  bIntPackSOF
          wIstr
      28  pEpInt_IN
      28  pEpInt_OUT

 
  4 bytes in section .bss
 56 bytes in section .data
 96 bytes in section .text
 
 96 bytes of CODE memory
 60 bytes of DATA memory

Errors: none
Warnings: none
