###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      31/Oct/2014  21:00:37 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\FredZhou\Documents\Origin\Projects\platform\STM #
#                    32L1XX\Libraries\STM32L1xx_StdPeriph_Driver\src\misc.c   #
#    Command line =  C:\Users\FredZhou\Documents\Origin\Projects\platform\STM #
#                    32L1XX\Libraries\STM32L1xx_StdPeriph_Driver\src\misc.c   #
#                    -D USE_STDPERIPH_DRIVER -D STM32L1XX_MD -D               #
#                    SYSCLK_FREQ_HSI_32MHz -D ENABLE_USB -D                   #
#                    ENABLE_USB_PRINTF -D DEBUG -D SERVER -D ACCEL_TEST -lcN  #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\List\ --diag_suppress Pa050 -o         #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\Obj\ --debug --endian=little           #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\inc\ -I "C:\Users\FredZhou\Documents\Origi #
#                    n\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth     #
#                    LE\SimpleBlueNRG_HCI\" -I "C:\Users\FredZhou\Documents\O #
#                    rigin\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth #
#                     LE\SimpleBlueNRG_HCI\includes\" -I                      #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\ -I               #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\ -I     #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\CMSIS\C #
#                    M3\DeviceSupport\ST\STM32L1xx\ -I                        #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32_U #
#                    SB-FS-Device_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32L1 #
#                    xx_StdPeriph_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\I2C\inc #
#                    \ -I C:\Users\FredZhou\Documents\Origin\Projects\Project #
#                    \BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LI #
#                    S3DH\inc\ -I C:\Users\FredZhou\Documents\Origin\Projects #
#                    \Project\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libr #
#                    aries\STLM75\inc\ -I C:\Users\FredZhou\Documents\Origin\ #
#                    Projects\Project\BLE_Chat\EWARM\..\..\..\platform\STM32L #
#                    1XX\Libraries\HTS221\inc\ -I                             #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LPS25H\ #
#                    inc\ -I C:\Users\FredZhou\Documents\Origin\Projects\Proj #
#                    ect\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries #
#                    \SDK_Eval_STM32L\inc\ -Ohs --use_c++_inline -I           #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\List\misc.lst                          #
#    Object file  =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\Obj\misc.o                             #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\FredZhou\Documents\Origin\Projects\platform\STM32L1XX\Libraries\STM32L1xx_StdPeriph_Driver\src\misc.c
      1          /**
      2            ******************************************************************************
      3            * @file    misc.c
      4            * @author  MCD Application Team
      5            * @version V1.3.0
      6            * @date    31-January-2014
      7            * @brief   This file provides all the miscellaneous firmware functions (add-on
      8            *          to CMSIS functions).
      9            ******************************************************************************
     10            * @attention
     11            *
     12            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     13            *
     14            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     15            * You may not use this file except in compliance with the License.
     16            * You may obtain a copy of the License at:
     17            *
     18            *        http://www.st.com/software_license_agreement_liberty_v2
     19            *
     20            * Unless required by applicable law or agreed to in writing, software 
     21            * distributed under the License is distributed on an "AS IS" BASIS, 
     22            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     23            * See the License for the specific language governing permissions and
     24            * limitations under the License.
     25            *
     26            ******************************************************************************
     27            */
     28          
     29          /* Includes ------------------------------------------------------------------*/
     30          #include "misc.h"
     31          
     32          /** @addtogroup STM32L1xx_StdPeriph_Driver
     33            * @{
     34            */
     35          
     36          /** @defgroup MISC 
     37            * @brief MISC driver modules
     38            * @{
     39            */
     40          
     41          /* Private typedef -----------------------------------------------------------*/
     42          /* Private define ------------------------------------------------------------*/
     43          #define AIRCR_VECTKEY_MASK    ((uint32_t)0x05FA0000)
     44          
     45          /* Private macro -------------------------------------------------------------*/
     46          /* Private variables ---------------------------------------------------------*/
     47          /* Private function prototypes -----------------------------------------------*/
     48          /* Private functions ---------------------------------------------------------*/
     49          
     50          /** @defgroup MISC_Private_Functions
     51            * @{
     52            */
     53          /**
     54            *
     55          @verbatim
     56           *******************************************************************************
     57                             ##### Interrupts configuration functions #####
     58           *******************************************************************************
     59              [..] This section provide functions allowing to configure the NVIC interrupts 
     60                   (IRQ).The Cortex-M3 exceptions are managed by CMSIS functions.
     61                   (#) Configure the NVIC Priority Grouping using NVIC_PriorityGroupConfig() 
     62                       function according to the following table.
     63                       The table below gives the allowed values of the preemption priority 
     64                       and subpriority according to the Priority Grouping configuration 
     65                       performed by NVIC_PriorityGroupConfig function.
     66            ============================================================================================================================
     67              NVIC_PriorityGroup   | NVIC_IRQChannelPreemptionPriority | NVIC_IRQChannelSubPriority  | Description
     68            ============================================================================================================================
     69             NVIC_PriorityGroup_0  |                0                  |            0-15             |   0 bits for preemption priority
     70                                   |                                   |                             |   4 bits for subpriority
     71            ----------------------------------------------------------------------------------------------------------------------------
     72             NVIC_PriorityGroup_1  |                0-1                |            0-7              |   1 bits for preemption priority
     73                                   |                                   |                             |   3 bits for subpriority
     74            ----------------------------------------------------------------------------------------------------------------------------
     75             NVIC_PriorityGroup_2  |                0-3                |            0-3              |   2 bits for preemption priority
     76                                   |                                   |                             |   2 bits for subpriority
     77            ----------------------------------------------------------------------------------------------------------------------------
     78             NVIC_PriorityGroup_3  |                0-7                |            0-1              |   3 bits for preemption priority
     79                                   |                                   |                             |   1 bits for subpriority
     80            ----------------------------------------------------------------------------------------------------------------------------
     81             NVIC_PriorityGroup_4  |                0-15               |            0                |   4 bits for preemption priority
     82                                   |                                   |                             |   0 bits for subpriority
     83            ============================================================================================================================
     84          
     85          
     86                   (#) Enable and Configure the priority of the selected IRQ Channels.  
     87          
     88                  -@- When the NVIC_PriorityGroup_0 is selected, it will no any nested interrupt,
     89                      the IRQ priority will be managed only by subpriority.
     90                      The sub-priority is only used to sort pending exception priorities, 
     91                      and does not affect active exceptions.
     92                  -@- Lower priority values gives higher priority.
     93                  -@- Priority Order:
     94                      (#@) Lowest Preemption priority.
     95                      (#@) Lowest Subpriority.
     96                      (#@) Lowest hardware priority (IRQn position).
     97            
     98          @endverbatim
     99          */
    100          
    101          /**
    102            * @brief  Configures the priority grouping: preemption priority and subpriority.
    103            * @param  NVIC_PriorityGroup: specifies the priority grouping bits length. 
    104            *   This parameter can be one of the following values:
    105            *     @arg NVIC_PriorityGroup_0: 0 bits for preemption priority
    106            *                                4 bits for subpriority.
    107            *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
    108            *           interrupt. This interrupts priority is managed only with subpriority.  
    109            *     @arg NVIC_PriorityGroup_1: 1 bits for preemption priority.
    110            *                                3 bits for subpriority.
    111            *     @arg NVIC_PriorityGroup_2: 2 bits for preemption priority.
    112            *                                2 bits for subpriority.
    113            *     @arg NVIC_PriorityGroup_3: 3 bits for preemption priority.
    114            *                                1 bits for subpriority.
    115            *     @arg NVIC_PriorityGroup_4: 4 bits for preemption priority.
    116            *                                0 bits for subpriority.
    117            * @retval None
    118            */
    119          void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
    120          {
    121            /* Check the parameters */
    122            assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
    123            
    124            /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
    125            SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    126          }
    127          
    128          /**
    129            * @brief  Initializes the NVIC peripheral according to the specified
    130            *         parameters in the NVIC_InitStruct.
    131            * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
    132            *         function should be called before.
    133            * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
    134            *         the configuration information for the specified NVIC peripheral.
    135            * @retval None
    136            */
    137          void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
    138          {
    139            uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    140            
    141            /* Check the parameters */
    142            assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
    143            assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
    144            assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    145              
    146            if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    147            {
    148              /* Compute the Corresponding IRQ Priority --------------------------------*/    
    149              tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    150              tmppre = (0x4 - tmppriority);
    151              tmpsub = tmpsub >> tmppriority;
    152          
    153              tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    154              tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
    155              tmppriority = tmppriority << 0x04;
    156                  
    157              NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    158              
    159              /* Enable the Selected IRQ Channels --------------------------------------*/
    160              NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    161                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    162            }
    163            else
    164            {
    165              /* Disable the Selected IRQ Channels -------------------------------------*/
    166              NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    167                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    168            }
    169          }
    170          
    171          /**
    172            * @brief  Sets the vector table location and Offset.
    173            * @param  NVIC_VectTab: specifies if the vector table is in RAM or FLASH memory.
    174            *   This parameter can be one of the following values:
    175            *     @arg NVIC_VectTab_RAM: Vector Table in internal SRAM.
    176            *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
    177            * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
    178            * @retval None
    179            */
    180          void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
    181          { 
    182            /* Check the parameters */
    183            assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
    184            assert_param(IS_NVIC_OFFSET(Offset));  
    185             
    186            SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    187          }
    188          
    189          /**
    190            * @brief  Selects the condition for the system to enter low power mode.
    191            * @param  LowPowerMode: Specifies the new mode for the system to enter low power mode.
    192            *   This parameter can be one of the following values:
    193            *     @arg NVIC_LP_SEVONPEND: Low Power SEV on Pend.
    194            *     @arg NVIC_LP_SLEEPDEEP: Low Power DEEPSLEEP request.
    195            *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
    196            * @param  NewState: new state of LP condition. 
    197            *         This parameter can be: ENABLE or DISABLE.
    198            * @retval None
    199            */
    200          void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
    201          {
    202            /* Check the parameters */
    203            assert_param(IS_NVIC_LP(LowPowerMode));
    204            assert_param(IS_FUNCTIONAL_STATE(NewState));  
    205            
    206            if (NewState != DISABLE)
    207            {
    208              SCB->SCR |= LowPowerMode;
    209            }
    210            else
    211            {
    212              SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    213            }
    214          }
    215          
    216          #if 0 /* TBR */
    217          /**
    218            * @brief  Configures the SysTick clock source.
    219            * @param  SysTick_CLKSource: specifies the SysTick clock source.
    220            *   This parameter can be one of the following values:
    221            *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
    222            *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
    223            * @retval None
    224            */
    225          void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
    226          {
    227            /* Check the parameters */
    228            assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
    229            
    230            if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    231            {
    232              SysTick->CTRL |= SysTick_CLKSource_HCLK;
    233            }
    234            else
    235            {
    236              SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    237            }
    238          }
    239          
    240          #endif /* TBR ??? */
    241          /**
    242            * @}
    243            */
    244          
    245          /**
    246            * @}
    247            */
    248          
    249          /**
    250            * @}
    251            */
    252          
    253          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   NVIC_Init
       0   NVIC_PriorityGroupConfig
       0   NVIC_SetVectorTable
       0   NVIC_SystemLPConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
      92  NVIC_Init
      10  NVIC_PriorityGroupConfig
      12  NVIC_SetVectorTable
      18  NVIC_SystemLPConfig

 
 164 bytes in section .text
 
 164 bytes of CODE memory

Errors: none
Warnings: none
