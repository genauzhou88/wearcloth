###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      31/Oct/2014  21:00:38 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\FredZhou\Documents\Origin\Projects\platform\STM #
#                    32L1XX\Libraries\STM32_USB-FS-Device_Driver\src\otgd_fs_ #
#                    dev.c                                                    #
#    Command line =  C:\Users\FredZhou\Documents\Origin\Projects\platform\STM #
#                    32L1XX\Libraries\STM32_USB-FS-Device_Driver\src\otgd_fs_ #
#                    dev.c -D USE_STDPERIPH_DRIVER -D STM32L1XX_MD -D         #
#                    SYSCLK_FREQ_HSI_32MHz -D ENABLE_USB -D                   #
#                    ENABLE_USB_PRINTF -D DEBUG -D SERVER -D ACCEL_TEST -lcN  #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\List\ --diag_suppress Pa050 -o         #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\Obj\ --debug --endian=little           #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\inc\ -I "C:\Users\FredZhou\Documents\Origi #
#                    n\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth     #
#                    LE\SimpleBlueNRG_HCI\" -I "C:\Users\FredZhou\Documents\O #
#                    rigin\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth #
#                     LE\SimpleBlueNRG_HCI\includes\" -I                      #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\ -I               #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\ -I     #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\CMSIS\C #
#                    M3\DeviceSupport\ST\STM32L1xx\ -I                        #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32_U #
#                    SB-FS-Device_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32L1 #
#                    xx_StdPeriph_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\I2C\inc #
#                    \ -I C:\Users\FredZhou\Documents\Origin\Projects\Project #
#                    \BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LI #
#                    S3DH\inc\ -I C:\Users\FredZhou\Documents\Origin\Projects #
#                    \Project\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libr #
#                    aries\STLM75\inc\ -I C:\Users\FredZhou\Documents\Origin\ #
#                    Projects\Project\BLE_Chat\EWARM\..\..\..\platform\STM32L #
#                    1XX\Libraries\HTS221\inc\ -I                             #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LPS25H\ #
#                    inc\ -I C:\Users\FredZhou\Documents\Origin\Projects\Proj #
#                    ect\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries #
#                    \SDK_Eval_STM32L\inc\ -Ohs --use_c++_inline -I           #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\List\otgd_fs_dev.lst                   #
#    Object file  =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\Obj\otgd_fs_dev.o                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\FredZhou\Documents\Origin\Projects\platform\STM32L1XX\Libraries\STM32_USB-FS-Device_Driver\src\otgd_fs_dev.c
      1          /******************** (C) COPYRIGHT 2011 STMicroelectronics ********************
      2          * File Name          : otgd_fs_dev.c
      3          * Author             : STMicroelectronics
      4          * Version            : V3.3.0
      5          * Date               : 21-March-2011
      6          * Description        : High Layer device mode interface and wrapping layer.
      7          ********************************************************************************
      8          * THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          *******************************************************************************/
     15          
     16          #ifdef STM32F10X_CL
     17          
     18          /* Includes ------------------------------------------------------------------*/
     19          #include "otgd_fs_dev.h"
     20          #include "usb_regs.h"
     21          #include "otgd_fs_cal.h"
     22          #include "otgd_fs_pcd.h"
     23          
     24          /* Private typedef -----------------------------------------------------------*/
     25          /* Private define ------------------------------------------------------------*/
     26          /* Private macro -------------------------------------------------------------*/
     27          /* Private variables ---------------------------------------------------------*/
     28          /* Extern variables ----------------------------------------------------------*/
     29          /* Private function prototypes -----------------------------------------------*/
     30          
     31          /* Private functions ---------------------------------------------------------*/
     32          
     33          /*******************************************************************************
     34          * Function Name  : OTG_DEV_Init
     35          * Description    : Initialize the OTG Device IP and EP0.
     36          * Input          : None.
     37          * Output         : None.
     38          * Return         : None. 
     39          *******************************************************************************/
     40          void OTG_DEV_Init(void)
     41          {
     42            EP_DESCRIPTOR ep_descriptor;
     43            
     44            /* Init peripheral driver */
     45            PCD_Init();
     46            
     47            /* Configure and open the IN control EP0 */ 
     48            ep_descriptor.bEndpointAddress = 0x80;
     49            ep_descriptor.wMaxPacketSize = 64;  
     50            ep_descriptor.bmAttributes = USB_ENDPOINT_XFER_CONTROL; 
     51            PCD_EP_Open(&ep_descriptor);
     52            
     53            /* Configure and open the OUT control EP0 */ 
     54            ep_descriptor.bEndpointAddress = 0x00;
     55            PCD_EP_Open(&ep_descriptor);    
     56          
     57            OTGD_FS_EPStartXfer(PCD_GetOutEP(0));
     58            
     59            /* Enable EP0 to start receiving setup packets */  
     60            PCD_EP0_OutStart();  
     61            
     62            /* Enable USB Global interrupt */
     63            OTGD_FS_EnableGlobalInt();     
     64          }
     65          
     66          
     67          /*******************************************************************************
     68          * Function Name  : OTG_DEV_EP_Init
     69          * Description    : Initialize the selected endpoint parameters
     70          * Input          : - bEpAdd: address of the endpoint (epnum|epdir) 
     71          *                     example: EP1 OUT -> 0x01 and EP1 IN 0x81.
     72          *                  - bEpType: OTG_DEV_EP_TYPE_CONTROL, OTG_DEV_EP_TYPE_ISOC, 
     73          *                     OTG_DEV_EP_TYPE_BULK, OTG_DEV_EP_TYPE_INT
     74          *                  - wEpMaxPackSize: The EP max packet size.
     75          * Output         : None.
     76          * Return         : Status: New status to be set for the endpoint: 
     77          *******************************************************************************/
     78          void OTG_DEV_EP_Init(uint8_t bEpAdd, uint8_t bEpType, uint16_t wEpMaxPackSize)
     79          {
     80            EP_DESCRIPTOR ep_descriptor;
     81            USB_OTG_EP *ep;
     82            
     83            /* Set the EP parameters in a structure */
     84            ep_descriptor.bEndpointAddress = bEpAdd;
     85            ep_descriptor.bmAttributes = bEpType; 
     86            ep_descriptor.wMaxPacketSize = wEpMaxPackSize;
     87          
     88            PCD_EP_Flush(bEpAdd);
     89            
     90            /* Open the EP with entered parameters */   
     91            PCD_EP_Open(&ep_descriptor); 
     92            
     93            /* Activate the EP if it is an OUT EP */
     94            if ((bEpAdd & 0x80) == 0)
     95            {
     96              ep = PCD_GetOutEP(bEpAdd & 0x7F);
     97              OTGD_FS_EPStartXfer(ep);
     98            } 
     99            else
    100            {
    101              ep = PCD_GetInEP(bEpAdd & 0x7F);
    102              ep->even_odd_frame = 0;    
    103              OTG_DEV_SetEPTxStatus(bEpAdd, DEV_EP_TX_NAK);
    104            }
    105            
    106          }
    107          
    108          /*******************************************************************************
    109          * Function Name  : OTG_DEV_GetEPTxStatus
    110          * Description    : Set the related endpoint status.
    111          * Input          : Number of the endpoint.
    112          * Output         : None.
    113          * Return         : Status: New status to be set for the endpoint: 
    114          *******************************************************************************/
    115          uint32_t OTG_DEV_GetEPTxStatus(uint8_t bEpnum) 
    116          {
    117            USB_OTG_EP *ep;
    118            uint32_t status = 0;
    119            
    120            ep = PCD_GetInEP(bEpnum & 0x7F); 
    121            
    122            status = OTGD_FS_GetEPStatus(ep); 
    123            
    124            return status; 
    125          }
    126          
    127          /*******************************************************************************
    128          * Function Name  : OTG_DEV_GetEPRxStatus
    129          * Description    : returns the related endpoint status.
    130          * Input          : Number of the endpoint.
    131          * Output         : None.
    132          * Return         : Status: New status to be set for the endpoint: 
    133          *******************************************************************************/
    134          uint32_t OTG_DEV_GetEPRxStatus(uint8_t bEpnum)
    135          {
    136            USB_OTG_EP *ep;
    137            uint32_t status = 0;
    138            
    139            ep = PCD_GetOutEP(bEpnum & 0x7F); 
    140            
    141            status = OTGD_FS_GetEPStatus(ep); 
    142            
    143            return status;
    144          }
    145          
    146          /*******************************************************************************
    147          * Function Name  : OTG_DEV_SetEPTxStatus
    148          * Description    : Sets the related endpoint status.
    149          * Input          : - bEpnum: Number of the endpoint.
    150          *                  - Status: New status to be set for the endpoint. It can be
    151          *                    DEV_EP_TX_VALID, DEV_EP_TX_STALL, DEV_EP_TX_NAK or 
    152          *                    DEV_EP_TX_DISABLE.
    153          * Output         : None.
    154          * Return         : None.
    155          *******************************************************************************/
    156          void OTG_DEV_SetEPTxStatus(uint8_t bEpnum, uint32_t Status) 
    157          {
    158            USB_OTG_EP *ep;
    159             
    160            ep = PCD_GetInEP(bEpnum & 0x7F); 
    161            
    162            if ((bEpnum == 0x80) && (Status == DEV_EP_TX_STALL))
    163            {
    164              ep->is_in = 1;
    165            }
    166            
    167            OTGD_FS_SetEPStatus(ep, Status); 
    168          }
    169          
    170          /*******************************************************************************
    171          * Function Name  : OTG_DEV_SetEPRxStatus
    172          * Description    : Sets the related endpoint status.
    173          * Input          : - bEpnum: Number of the endpoint.
    174          *                  - Status: New status to be set for the endpoint. It can be
    175          *                    DEV_EP_RX_VALID, DEV_EP_RX_STALL, DEV_EP_RX_NAK or 
    176          *                    DEV_EP_RX_DISABLE.
    177          * Output         : None.
    178          * Return         : None.
    179          *******************************************************************************/
    180          void OTG_DEV_SetEPRxStatus(uint8_t bEpnum, uint32_t Status)                           
    181          {
    182            USB_OTG_EP *ep;
    183           
    184            ep = PCD_GetOutEP(bEpnum & 0x7F); 
    185            
    186            OTGD_FS_SetEPStatus(ep, Status); 
    187          }
    188          
    189          /*******************************************************************************
    190          * Function Name  : USB_DevDisconnect
    191          * Description    : Disconnect the Pull-up resist.
    192          * Input          : bEpNum: Endpoint Number. 
    193          *                  wState: new state.
    194          * Output         : None.
    195          * Return         : None.
    196          *******************************************************************************/
    197          void USB_DevDisconnect(void)
    198          {
    199            PCD_DevDisconnect();
    200          }
    201          
    202          /*******************************************************************************
    203          * Function Name  : USB_DevConnect
    204          * Description    : Disconnect the .
    205          * Input          : bEpNum: Endpoint Number. 
    206          *                  wState: new state.
    207          * Output         : None.
    208          * Return         : None.
    209          *******************************************************************************/
    210          void USB_DevConnect(void)
    211          {
    212            PCD_DevConnect();
    213          }
    214          
    215          /*-*-*-*-*-*-*-*-*-* Replace the usb_regs.h defines -*-*-*-*-*-*-*-*-*-*-*-*-*/
    216          
    217          /*******************************************************************************
    218          * Function Name  : SetEPTxStatus
    219          * Description    : Set the status of Tx endpoint.
    220          * Input          : bEpNum: Endpoint Number. 
    221          *                  wState: new state.
    222          * Output         : None.
    223          * Return         : None.
    224          *******************************************************************************/
    225          void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
    226          {
    227            _SetEPTxStatus(bEpNum, wState);
    228          }
    229          
    230          /*******************************************************************************
    231          * Function Name  : SetEPRxStatus
    232          * Description    : Set the status of Rx endpoint.
    233          * Input          : bEpNum: Endpoint Number. 
    234          *                  wState: new state.
    235          * Output         : None.
    236          * Return         : None.
    237          *******************************************************************************/
    238          void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
    239          {
    240            _SetEPRxStatus(bEpNum, wState);
    241          }
    242          
    243          /*******************************************************************************
    244          * Function Name  : GetEPTxStatus
    245          * Description    : Returns the endpoint Tx status.
    246          * Input          : bEpNum: Endpoint Number. 
    247          * Output         : None.
    248          * Return         : Endpoint TX Status
    249          *******************************************************************************/
    250          uint16_t GetEPTxStatus(uint8_t bEpNum) 
    251          {
    252            return(_GetEPTxStatus(bEpNum));
    253          }
    254          
    255          /*******************************************************************************
    256          * Function Name  : GetEPRxStatus
    257          * Description    : Returns the endpoint Rx status.
    258          * Input          : bEpNum: Endpoint Number. 
    259          * Output         : None.
    260          * Return         : Endpoint RX Status
    261          *******************************************************************************/
    262          uint16_t GetEPRxStatus(uint8_t bEpNum) 
    263          {
    264            return(_GetEPRxStatus(bEpNum));
    265          }
    266          
    267          /*******************************************************************************
    268          * Function Name  : SetEPTxValid
    269          * Description    : Valid the endpoint Tx Status.
    270          * Input          : bEpNum: Endpoint Number.  
    271          * Output         : None.
    272          * Return         : None.
    273          *******************************************************************************/
    274          void SetEPTxValid(uint8_t bEpNum)
    275          {
    276            _SetEPTxStatus(bEpNum, EP_TX_VALID);
    277          }
    278          
    279          /*******************************************************************************
    280          * Function Name  : SetEPRxValid
    281          * Description    : Valid the endpoint Rx Status.
    282          * Input          : bEpNum: Endpoint Number. 
    283          * Output         : None.
    284          * Return         : None.
    285          *******************************************************************************/
    286          void SetEPRxValid(uint8_t bEpNum)
    287          {
    288            _SetEPRxStatus(bEpNum, EP_RX_VALID);
    289          }
    290          
    291          /*******************************************************************************
    292          * Function Name  : GetTxStallStatus
    293          * Description    : Returns the Stall status of the Tx endpoint.
    294          * Input          : bEpNum: Endpoint Number. 
    295          * Output         : None.
    296          * Return         : Tx Stall status.
    297          *******************************************************************************/
    298          uint16_t GetTxStallStatus(uint8_t bEpNum)
    299          {
    300            return(_GetTxStallStatus(bEpNum));
    301          }
    302          
    303          /*******************************************************************************
    304          * Function Name  : GetRxStallStatus
    305          * Description    : Returns the Stall status of the Rx endpoint. 
    306          * Input          : bEpNum: Endpoint Number. 
    307          * Output         : None.
    308          * Return         : Rx Stall status.
    309          *******************************************************************************/
    310          uint16_t GetRxStallStatus(uint8_t bEpNum)
    311          {
    312            return(_GetRxStallStatus(bEpNum));
    313          }
    314          
    315          /*******************************************************************************
    316          * Function Name  : SetEPTxCount.
    317          * Description    : Set the Tx count.
    318          * Input          : bEpNum: Endpoint Number.
    319          *                  wCount: new count value.
    320          * Output         : None.
    321          * Return         : None.
    322          *******************************************************************************/
    323          void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
    324          {
    325          }
    326          
    327          /*******************************************************************************
    328          * Function Name  : SetEPRxCount
    329          * Description    : Set the Rx count.
    330          * Input          : bEpNum: Endpoint Number. 
    331          *                  wCount: the new count value.
    332          * Output         : None.
    333          * Return         : None.
    334          *******************************************************************************/
    335          void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
    336          { 
    337          }
    338          
    339          /*******************************************************************************
    340          * Function Name  : ToWord
    341          * Description    : merge two byte in a word.
    342          * Input          : bh: byte high, bl: bytes low.
    343          * Output         : None.
    344          * Return         : resulted word.
    345          *******************************************************************************/
    346          uint16_t ToWord(uint8_t bh, uint8_t bl)
    347          {
    348            uint16_t wRet = 0;
    349            wRet = (uint16_t)bl | ((uint16_t)bh << 8);
    350            return(wRet);
    351          }
    352          
    353          /*******************************************************************************
    354          * Function Name  : ByteSwap
    355          * Description    : Swap two byte in a word.
    356          * Input          : wSwW: word to Swap.
    357          * Output         : None.
    358          * Return         : resulted word.
    359          *******************************************************************************/
    360          uint16_t ByteSwap(uint16_t wSwW)
    361          {
    362            uint8_t bTemp = 0;
    363            uint16_t wRet = 0;
    364            
    365            bTemp = (uint8_t)(wSwW & 0xff);
    366            wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
    367            return(wRet);
    368          }
    369          
    370          #endif /* STM32F10X_CL */
    371          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/


 

 


Errors: none
Warnings: none
