###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      31/Oct/2014  21:00:53 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\FredZhou\Documents\Origin\Projects\platform\STM #
#                    32L1XX\Libraries\STM32_USB-FS-Device_Driver\src\usb_int. #
#                    c                                                        #
#    Command line =  C:\Users\FredZhou\Documents\Origin\Projects\platform\STM #
#                    32L1XX\Libraries\STM32_USB-FS-Device_Driver\src\usb_int. #
#                    c -D USE_STDPERIPH_DRIVER -D STM32L1XX_MD -D             #
#                    SYSCLK_FREQ_HSI_32MHz -D ENABLE_USB -D                   #
#                    ENABLE_USB_PRINTF -D DEBUG -D SERVER -D ACCEL_TEST -lcN  #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\List\ --diag_suppress Pa050 -o         #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\Obj\ --debug --endian=little           #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\inc\ -I "C:\Users\FredZhou\Documents\Origi #
#                    n\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth     #
#                    LE\SimpleBlueNRG_HCI\" -I "C:\Users\FredZhou\Documents\O #
#                    rigin\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth #
#                     LE\SimpleBlueNRG_HCI\includes\" -I                      #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\ -I               #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\ -I     #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\CMSIS\C #
#                    M3\DeviceSupport\ST\STM32L1xx\ -I                        #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32_U #
#                    SB-FS-Device_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32L1 #
#                    xx_StdPeriph_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\I2C\inc #
#                    \ -I C:\Users\FredZhou\Documents\Origin\Projects\Project #
#                    \BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LI #
#                    S3DH\inc\ -I C:\Users\FredZhou\Documents\Origin\Projects #
#                    \Project\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libr #
#                    aries\STLM75\inc\ -I C:\Users\FredZhou\Documents\Origin\ #
#                    Projects\Project\BLE_Chat\EWARM\..\..\..\platform\STM32L #
#                    1XX\Libraries\HTS221\inc\ -I                             #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LPS25H\ #
#                    inc\ -I C:\Users\FredZhou\Documents\Origin\Projects\Proj #
#                    ect\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries #
#                    \SDK_Eval_STM32L\inc\ -Ohs --use_c++_inline -I           #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\List\usb_int.lst                       #
#    Object file  =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\Obj\usb_int.o                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\FredZhou\Documents\Origin\Projects\platform\STM32L1XX\Libraries\STM32_USB-FS-Device_Driver\src\usb_int.c
      1          /******************** (C) COPYRIGHT 2011 STMicroelectronics ********************
      2          * File Name          : usb_int.c
      3          * Author             : MCD Application Team
      4          * Version            : V3.3.0
      5          * Date               : 21-March-2011
      6          * Description        : Endpoint CTR (Low and High) interrupt's service routines
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          *******************************************************************************/
     15          #ifndef STM32F10X_CL
     16          
     17          /* Includes ------------------------------------------------------------------*/
     18          #include "usb_lib.h"
     19          
     20          /* Private typedef -----------------------------------------------------------*/
     21          /* Private define ------------------------------------------------------------*/
     22          /* Private macro -------------------------------------------------------------*/
     23          /* Private variables ---------------------------------------------------------*/
     24          __IO uint16_t SaveRState;
     25          __IO uint16_t SaveTState;
     26          
     27          /* Extern variables ----------------------------------------------------------*/
     28          extern void (*pEpInt_IN[7])(void);    /*  Handles IN  interrupts   */
     29          extern void (*pEpInt_OUT[7])(void);   /*  Handles OUT interrupts   */
     30          
     31          /* Private function prototypes -----------------------------------------------*/
     32          /* Private functions ---------------------------------------------------------*/
     33          
     34          /*******************************************************************************
     35          * Function Name  : CTR_LP.
     36          * Description    : Low priority Endpoint Correct Transfer interrupt's service
     37          *                  routine.
     38          * Input          : None.
     39          * Output         : None.
     40          * Return         : None.
     41          *******************************************************************************/
     42          void CTR_LP(void)
     43          {
     44            __IO uint16_t wEPVal = 0;
     45            /* stay in loop while pending interrupts */
     46            while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
     47            {
     48              /* extract highest priority endpoint number */
     49              EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
     50              if (EPindex == 0)
     51              {
     52                /* Decode and service control endpoint interrupt */
     53                /* calling related service routine */
     54                /* (Setup0_Process, In0_Process, Out0_Process) */
     55          
     56                /* save RX & TX status */
     57                /* and set both to NAK */
     58          
     59          
     60          	    SaveRState = _GetENDPOINT(ENDP0);
     61          	    SaveTState = SaveRState & EPTX_STAT;
     62          	    SaveRState &=  EPRX_STAT;	
     63          
     64          	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
     65          
     66                /* DIR bit = origin of the interrupt */
     67          
     68                if ((wIstr & ISTR_DIR) == 0)
     69                {
     70                  /* DIR = 0 */
     71          
     72                  /* DIR = 0      => IN  int */
     73                  /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
     74          
     75          
     76                  _ClearEP_CTR_TX(ENDP0);
     77                  In0_Process();
     78          
     79                     /* before terminate set Tx & Rx status */
     80          
     81                      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
     82          		  return;
     83                }
     84                else
     85                {
     86                  /* DIR = 1 */
     87          
     88                  /* DIR = 1 & CTR_RX       => SETUP or OUT int */
     89                  /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
     90          
     91                  wEPVal = _GetENDPOINT(ENDP0);
     92                  
     93                  if ((wEPVal &EP_SETUP) != 0)
     94                  {
     95                    _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
     96                    Setup0_Process();
     97                    /* before terminate set Tx & Rx status */
     98          
     99          		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
    100                    return;
    101                  }
    102          
    103                  else if ((wEPVal & EP_CTR_RX) != 0)
    104                  {
    105                    _ClearEP_CTR_RX(ENDP0);
    106                    Out0_Process();
    107                    /* before terminate set Tx & Rx status */
    108               
    109          		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
    110                    return;
    111                  }
    112                }
    113              }/* if(EPindex == 0) */
    114              else
    115              {
    116                /* Decode and service non control endpoints interrupt  */
    117          
    118                /* process related endpoint register */
    119                wEPVal = _GetENDPOINT(EPindex);
    120                if ((wEPVal & EP_CTR_RX) != 0)
    121                {
    122                  /* clear int flag */
    123                  _ClearEP_CTR_RX(EPindex);
    124          
    125                  /* call OUT service function */
    126                  (*pEpInt_OUT[EPindex-1])();
    127          
    128                } /* if((wEPVal & EP_CTR_RX) */
    129          
    130                if ((wEPVal & EP_CTR_TX) != 0)
    131                {
    132                  /* clear int flag */
    133                  _ClearEP_CTR_TX(EPindex);
    134          
    135                  /* call IN service function */
    136                  (*pEpInt_IN[EPindex-1])();
    137                } /* if((wEPVal & EP_CTR_TX) != 0) */
    138          
    139              }/* if(EPindex == 0) else */
    140          
    141            }/* while(...) */
    142          }
    143          
    144          /*******************************************************************************
    145          * Function Name  : CTR_HP.
    146          * Description    : High Priority Endpoint Correct Transfer interrupt's service 
    147          *                  routine.
    148          * Input          : None.
    149          * Output         : None.
    150          * Return         : None.
    151          *******************************************************************************/
    152          void CTR_HP(void)
    153          {
    154            uint32_t wEPVal = 0;
    155          
    156            while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
    157            {
    158              _SetISTR((uint16_t)CLR_CTR); /* clear CTR flag */
    159              /* extract highest priority endpoint number */
    160              EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
    161              /* process related endpoint register */
    162              wEPVal = _GetENDPOINT(EPindex);
    163              if ((wEPVal & EP_CTR_RX) != 0)
    164              {
    165                /* clear int flag */
    166                _ClearEP_CTR_RX(EPindex);
    167          
    168                /* call OUT service function */
    169                (*pEpInt_OUT[EPindex-1])();
    170          
    171              } /* if((wEPVal & EP_CTR_RX) */
    172              else if ((wEPVal & EP_CTR_TX) != 0)
    173              {
    174                /* clear int flag */
    175                _ClearEP_CTR_TX(EPindex);
    176          
    177                /* call IN service function */
    178                (*pEpInt_IN[EPindex-1])();
    179          
    180          
    181              } /* if((wEPVal & EP_CTR_TX) != 0) */
    182          
    183            }/* while(...) */
    184          }
    185          
    186          #endif  /* STM32F10X_CL */
    187          
    188          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   CTR_HP
        40   -- Indirect call
      40   CTR_LP
        40   -- Indirect call
        40   -> In0_Process
        40   -> Out0_Process
        40   -> Setup0_Process


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
     122  CTR_HP
     304  CTR_LP
       4  SaveRState
          SaveTState

 
   4 bytes in section .bss
 454 bytes in section .text
 
 454 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
