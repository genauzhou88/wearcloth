###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      31/Oct/2014  21:00:40 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\FredZhou\Documents\Origin\Projects\platform\STM #
#                    32L1XX\Libraries\SDK_Eval_STM32L\src\SDK_EVAL_Io.c       #
#    Command line =  C:\Users\FredZhou\Documents\Origin\Projects\platform\STM #
#                    32L1XX\Libraries\SDK_Eval_STM32L\src\SDK_EVAL_Io.c -D    #
#                    USE_STDPERIPH_DRIVER -D STM32L1XX_MD -D                  #
#                    SYSCLK_FREQ_HSI_32MHz -D ENABLE_USB -D                   #
#                    ENABLE_USB_PRINTF -D DEBUG -D SERVER -D ACCEL_TEST -lcN  #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\List\ --diag_suppress Pa050 -o         #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\Obj\ --debug --endian=little           #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\inc\ -I "C:\Users\FredZhou\Documents\Origi #
#                    n\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth     #
#                    LE\SimpleBlueNRG_HCI\" -I "C:\Users\FredZhou\Documents\O #
#                    rigin\Projects\Project\BLE_Chat\EWARM\..\..\..\Bluetooth #
#                     LE\SimpleBlueNRG_HCI\includes\" -I                      #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\ -I               #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\ -I     #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\CMSIS\C #
#                    M3\DeviceSupport\ST\STM32L1xx\ -I                        #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32_U #
#                    SB-FS-Device_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32L1 #
#                    xx_StdPeriph_Driver\inc\ -I                              #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\I2C\inc #
#                    \ -I C:\Users\FredZhou\Documents\Origin\Projects\Project #
#                    \BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LI #
#                    S3DH\inc\ -I C:\Users\FredZhou\Documents\Origin\Projects #
#                    \Project\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libr #
#                    aries\STLM75\inc\ -I C:\Users\FredZhou\Documents\Origin\ #
#                    Projects\Project\BLE_Chat\EWARM\..\..\..\platform\STM32L #
#                    1XX\Libraries\HTS221\inc\ -I                             #
#                    C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries\LPS25H\ #
#                    inc\ -I C:\Users\FredZhou\Documents\Origin\Projects\Proj #
#                    ect\BLE_Chat\EWARM\..\..\..\platform\STM32L1XX\Libraries #
#                    \SDK_Eval_STM32L\inc\ -Ohs --use_c++_inline -I           #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\List\SDK_EVAL_Io.lst                   #
#    Object file  =  C:\Users\FredZhou\Documents\Origin\Projects\Project\BLE_ #
#                    Chat\EWARM\Server\Obj\SDK_EVAL_Io.o                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\FredZhou\Documents\Origin\Projects\platform\STM32L1XX\Libraries\SDK_Eval_STM32L\src\SDK_EVAL_Io.c
      1          /**
      2           * @file    SDK_EVAL_Io.c
      3           * @author  AMS - AAS Division
      4           * @version V1.0.0
      5           * @date    April,2 2014
      6           * @brief   This file provides all the low level API to manage SDK I/O ports.
      7           * @details
      8           *
      9           * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10           * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     11           * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     12           * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     13           * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     14           * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15           *
     16           * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     17           * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     18           * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     19           *
     20           * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     21           */
     22          
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "SDK_EVAL_Config.h"
     26          #ifdef ENABLE_USB
     27          #include "hw_config.h"
     28          #endif 
     29          
     30          /** @addtogroup SDK_EVAL_STM32L
     31           * @{
     32           */
     33          
     34          
     35          /** @addtogroup SDK_EVAL_Io
     36           * @{
     37           */
     38          
     39          
     40          /** @defgroup SDK_EVAL_Io_Private_TypesDefinitions             SDK EVAL IO Private Types Definitions
     41           * @{
     42           */
     43          
     44          /**
     45           * @brief  IO_Receive_Data User callback 
     46           */
     47          typedef struct _IO_ReceiveCallBack
     48          {
     49            /**
     50             * callback to notify the applicatio with the received I/O data
     51             */ 
     52            IO_RECEIVE_DATA_USER_CALLBACK_TYPE IO_user_application;
     53          } IO_ReceiveCallBack;
     54          /**
     55           * @}
     56           */
     57          
     58          
     59          /** @defgroup SDK_EVAL_Io_Private_Defines                      SDK EVAL IO Private Defines
     60           * @{
     61           */
     62          
     63          /**
     64           * @}
     65           */
     66          
     67          
     68          /** @defgroup SDK_EVAL_Io_Private_Macros                       SDK EVAL IO Private Macros
     69           * @{
     70           */
     71          
     72          /* IO User Callback used to handle received data from I/O channel*/
     73          static IO_ReceiveCallBack IO_Receive_Data;
     74          
     75          /**
     76           * @}
     77           */
     78          
     79          /** @defgroup SDK_EVAL_Io_Private_Variables                    SDK EVAL IO Private Variables
     80           * @{
     81           */
     82          
     83          #ifdef ENABLE_USART
     84          USART_TypeDef* vectpxComUsart[COMn] = {EVAL_COM1};
     85          
     86          GPIO_TypeDef* vectpxComTxPort[COMn] = {EVAL_COM1_TX_GPIO_PORT};
     87          
     88          GPIO_TypeDef* vectpxComRxPort[COMn] = {EVAL_COM1_RX_GPIO_PORT};
     89          
     90          static const uint32_t s_vectlComUsartClk[COMn] = {EVAL_COM1_CLK};
     91          
     92          static const uint32_t s_vectlComTxPortClk[COMn] = {EVAL_COM1_TX_GPIO_CLK};
     93          
     94          static const uint32_t s_vectlComRxPortClk[COMn] = {EVAL_COM1_RX_GPIO_CLK};
     95          
     96          static const uint16_t s_vectnComTxPin[COMn] = {EVAL_COM1_TX_PIN};
     97          
     98          static const uint16_t s_vectnComRxPin[COMn] = {EVAL_COM1_RX_PIN};
     99          
    100          static const uint16_t s_vectnComTxPinSource[COMn] = {EVAL_COM1_TX_SOURCE};
    101          
    102          static const uint16_t s_vectnComRxPinSource[COMn] = {EVAL_COM1_RX_SOURCE};
    103          
    104          static const uint16_t s_vectnComTxAF[COMn] = {EVAL_COM1_TX_AF};
    105          
    106          static const uint16_t s_vectnComRxAF[COMn] = {EVAL_COM1_RX_AF};
    107          
    108          static const IRQn_Type s_vectnComRxIrqIrqn[COMn] = {EVAL_COM1_IRQn}; 
    109          
    110          static USART_TypeDef* s_UsartPort;
    111          
    112          
    113          /**
    114           * @}
    115           */
    116          
    117          
    118          /** @defgroup SDK_EVAL_Io_Private_FunctionPrototypes                   SDK EVAL IO Private Function Prototypes
    119           * @{
    120           */
    121          
    122          /**
    123           * @}
    124           */
    125          
    126          
    127          /** @defgroup SDK_EVAL_IO_Private_Functions                            SDK EVAL IO Private Functions
    128           * @{
    129           */
    130          
    131          /**
    132           * @brief  Configures Uart port.
    133           * @param  xCom Specifies the COM port to be configured.
    134           * @retval None.
    135           */
    136          static void SdkEvalUart_Init(SdkEvalCom xCom)
    137          {
    138            USART_InitTypeDef USART_InitStructure;
    139            NVIC_InitTypeDef NVIC_InitStructure;
    140            GPIO_InitTypeDef GPIO_InitStructure;
    141          
    142            s_UsartPort = vectpxComUsart[xCom];
    143          
    144            /* Enable GPIO clock */
    145            RCC_AHBPeriphClockCmd(s_vectlComTxPortClk[xCom] | s_vectlComRxPortClk[xCom], ENABLE);
    146          
    147            /* Enable UART clock */
    148            //RCC_APB1PeriphClockCmd(s_vectlComUsartClk[xCom], ENABLE);
    149          
    150          /* UART Periph clock enable */
    151          #if EVAL_COM1_USART2
    152            RCC_APB1PeriphClockCmd(s_vectlComUsartClk[xCom], ENABLE);
    153          #elif EVAL_COM1_USART1
    154            RCC_APB2PeriphClockCmd(s_vectlComUsartClk[xCom], ENABLE);
    155          #else
    156          #warning "ERROR on USART definition"
    157          #endif
    158            
    159            /* Connect PXx to USARTx_Tx*/
    160            GPIO_PinAFConfig(vectpxComTxPort[xCom], s_vectnComTxPinSource[xCom], s_vectnComTxAF[xCom]);
    161          
    162            /* Connect PXx to USARTx_Rx*/
    163            GPIO_PinAFConfig(vectpxComRxPort[xCom], s_vectnComRxPinSource[xCom], s_vectnComRxAF[xCom]);
    164          
    165            /* Configure USART Tx as alternate function push-pull */
    166            GPIO_InitStructure.GPIO_Pin = s_vectnComTxPin[xCom];
    167            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    168            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
    169            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    170            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    171            GPIO_Init(vectpxComTxPort[xCom], &GPIO_InitStructure);
    172          
    173            /* Configure USART Rx as input floating */
    174            GPIO_InitStructure.GPIO_Pin = s_vectnComRxPin[xCom];
    175            GPIO_Init(vectpxComRxPort[xCom], &GPIO_InitStructure);
    176          
    177          
    178            /* USARTx configuration ----------------------------------------------------*/
    179            /* USARTx configured as follow:
    180            - BaudRate = 115200 baud  
    181            - Word Length = 8 Bits
    182            - One Stop Bit
    183            - No parity
    184            - Hardware flow control disabled (RTS and CTS signals)
    185            - Receive and transmit enabled
    186            */
    187            USART_InitStructure.USART_BaudRate =  EVAL_COM1_BAUD_RATE; 
    188            USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    189            USART_InitStructure.USART_StopBits = USART_StopBits_1;
    190            USART_InitStructure.USART_Parity = USART_Parity_No;
    191            USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    192            USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    193          
    194            USART_Init(s_UsartPort, &USART_InitStructure);
    195            
    196            /* NVIC configuration */
    197            /* Configure the Priority Group to 2 bits */
    198            NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
    199            
    200            /* Enable the USARTx Interrupt */
    201            NVIC_InitStructure.NVIC_IRQChannel = s_vectnComRxIrqIrqn[xCom];
    202            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1; /* Move to 1 for coexistence with BlueNRG SPI irq */
    203            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    204            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    205            NVIC_Init(&NVIC_InitStructure);
    206          
    207            /* Enable the USARTx Receive interrupt: this interrupt is generated when the
    208            USARTx receive data register is not empty */
    209            USART_ITConfig(s_UsartPort, USART_IT_RXNE, ENABLE);
    210          
    211            /* Enable USART */
    212            USART_Cmd(s_UsartPort, ENABLE);
    213          }/* end SdkEvalUart_Init() */
    214          
    215          
    216          /**
    217           * @brief  Wait for serial data tx end
    218           * @param  None.
    219           * @retval None.
    220           */
    221          static void SdkEvalUart_Wait_Send_Data()  
    222          {	
    223            while(!(USART_GetFlagStatus(s_UsartPort, USART_FLAG_TXE)));
    224          }/* end SdkEvalUart_Wait_Send_Data() */
    225          
    226          /**
    227           * @brief  Send a byte on Serial port
    228           * @param  tx_data byte to be sent
    229           * @retval None.
    230           */
    231          static void SdkEvalUart_Send_Data(uint8_t tx_data)
    232          {
    233            /* wait for the transmission end */
    234            SdkEvalUart_Wait_Send_Data();
    235            /* send the data */
    236            USART_SendData(s_UsartPort, tx_data); 
    237          }/* end SdkEvalUart_Send_Data() */
    238          
    239          
    240          /**
    241           * @brief  Serial IRQ handler body to be put on user USARTx_IRQHandler() (stm32l1xx_it.c)
    242           * @param  None
    243           * @retval None.
    244           */
    245          void SdkEval_IO_Uart_Irq_Handler(void)
    246          {
    247            uint8_t read_data; 
    248            if(USART_GetITStatus(s_UsartPort, USART_IT_RXNE) != RESET)
    249            {
    250               /* Read byte from the receive FIFO */
    251               read_data = USART_ReceiveData(s_UsartPort);
    252               
    253               /* IO Receive Data: it handles the received data within the  User Application Function 
    254                  defined as parameter of SdkEval_IO_Config() */
    255               SdkEval_IO_Receive_Data(&read_data,1);
    256            
    257               /* Clear the USART1 Receive interrupt */
    258               USART_ClearITPendingBit(s_UsartPort, USART_IT_RXNE);
    259             }  
    260          }/* SdkEval_IO_Uart_Irq_Handler() */
    261          
    262          #undef putchar
    263          /**
    264            * @brief  Retargets the C library printf function to the USART.
    265            * @param  None
    266            * @retval None
    267            */
    268          int putchar(int ch)
    269          {
    270            SdkEval_IO_Send_Data((uint8_t) ch);
    271            return ch;
    272          }
    273          
    274          void __io_putchar(char c)
    275          {
    276            putchar(c);
    277          }
    278          
    279          #endif /* #ifdef ENABLE_USART */
    280          
    281          /**
    282           * @brief  Configure the selected I/O communciation channel
    283           * @param  None.
    284           * @retval None.
    285           */
    286          void SdkEval_IO_Config(IO_RECEIVE_DATA_USER_CALLBACK_TYPE io_receive_function)
    287          {
    288          #if defined (ENABLE_USB)
    289            /* Init USB: refer to file hw_config.c for USB APIs */
    290            Set_USBClock();
    291            USB_Interrupts_Config();
    292            USB_Init();
    293            IO_Receive_Data.IO_user_application = io_receive_function;
    294          #elif defined (ENABLE_USART)
    295            /* Init Serial Uart */
    296            SdkEvalUart_Init(COM1);
    297            IO_Receive_Data.IO_user_application = io_receive_function;
    298          #endif 
    299          
    300            
    301          }/* end SdkEval_IO_Config() */
    302          
    303          /**
    304           * @brief  Send a byte on selected I/O port
    305           * @param  tx_data byte to be sent
    306           * @retval None.
    307           */
    308          void SdkEval_IO_Send_Data(uint8_t tx_data)
    309          {
    310          #if defined (ENABLE_USB)
    311            /* Call USB send data API on hw_config.c */
    312            USB_Send_Data(tx_data);
    313          #elif defined (ENABLE_USART)
    314            SdkEvalUart_Send_Data(tx_data);
    315          #endif
    316          }/* end SdkEval_IO_Send_Data() */
    317          
    318          /**
    319           * @brief  Receive data on selected I/O port
    320           * @param  rx_data pointer to buffer of received
    321           * @param  data_size number of received data 
    322           * @retval None.
    323           */
    324          void SdkEval_IO_Receive_Data(uint8_t * rx_data, uint16_t data_size)
    325          {
    326            IO_Receive_Data.IO_user_application(rx_data,data_size);
    327            
    328          }/* end SdkEval_IO_Receive_Data() */
    329          /**
    330           * @}
    331           */
    332          
    333          
    334          /**
    335           * @}
    336           */
    337          
    338          
    339          /**
    340           * @}
    341           */
    342          
    343          
    344          /******************* (C) COPYRIGHT 2012 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SdkEval_IO_Config
         8   -> Set_USBClock
         8   -> USB_Init
         8   -> USB_Interrupts_Config
       0   SdkEval_IO_Receive_Data
         0   -- Indirect call
       0   SdkEval_IO_Send_Data
         0   -> USB_Send_Data


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  IO_Receive_Data
      22  SdkEval_IO_Config
       6  SdkEval_IO_Receive_Data
       4  SdkEval_IO_Send_Data

 
  4 bytes in section .bss
 36 bytes in section .text
 
 36 bytes of CODE memory
  4 bytes of DATA memory

Errors: none
Warnings: none
